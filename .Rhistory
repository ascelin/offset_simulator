end_hr = start_hr + nhours - 1
surface_meteorology = array(0, c(ny, nx, nhours))
if (length(dim(meteorology_input) == 3)){
surface_meteorology = meteorology_input[, , start_hr:end_hr]
} else if (length(dim(meteorology_input) == 4)){
surface_meteorology = meteorology_input[, , 1, start_hr:end_hr]
}
dim(surface_meteorology)
dim(surface_meteorology) = c(ny, nx, nhours)
dim(surface_meteorology)
hours_x = -12:11
gauss_dist = exp(-hours_x.^2/2.5^2)
dim(surface_meteorology) = c(ny, nx, nhours)
hours_x = -12:11
gauss_dist = exp(-hours_x^2/2.5^2)
gauss_dist
if (weight_type == 'weighted'){
seed_prob = rep(gauss_dist, ndays)
} else {
seed_prob = 1/72*array(1, c(nhours, 1))
}
seed_prob
seed_prob = seed_prob/sum(seed_prob)
seed_prob
weighted_mean = array(0, c(ny, nx))
for (hr in seq_len(nhours)){
weighted_mean = weighted_mean + seed_prob[hr]*surface_meteorology[, , hr]
}
weighted_mean = weighted_mean/max(abs(weighted_mean))
weight_meteorology <- function(weather_data, weight_type, start_date, ndays, nhours){
ny = 101
nx = 99
start_hr = (start_date - 2)*24 + 1
end_hr = start_hr + nhours - 1
surface_meteorology = array(0, c(ny, nx, nhours))
if (length(dim(meteorology_input) == 3)){
surface_meteorology = meteorology_input[, , start_hr:end_hr]
} else if (length(dim(meteorology_input) == 4)){
surface_meteorology = meteorology_input[, , 1, start_hr:end_hr]
}
dim(surface_meteorology) = c(ny, nx, nhours)
hours_x = -12:11
gauss_dist = exp(-hours_x^2/2.5^2)
if (weight_type == 'weighted'){
seed_prob = rep(gauss_dist, ndays)
} else {
seed_prob = 1/72*array(1, c(nhours, 1))
}
seed_prob = seed_prob/sum(seed_prob)
weighted_mean = array(0, c(ny, nx))
for (hr in seq_len(nhours)){
weighted_mean = weighted_mean + seed_prob[hr]*surface_meteorology[, , hr]
}
weighted_mean = weighted_mean/max(abs(weighted_mean))
return(weighted_mean)
}
weather_data <- readRDS('~/Documents/R_Codes/TAPM/weather_data.RDS')
h_vel <- weather_data$h.vel
dim(h_vel)
day
ny = 101
nx = 99
nhours = 72
ndays = 28
weather_data <- readRDS('~/Documents/R_Codes/TAPM/weather_data.RDS')
h_vel <- weather_data$h.vel
list_avg <- vector('list', ndays)
ny = 101
nx = 99
nhours = 72
weather_data <- readRDS('~/Documents/R_Codes/TAPM/weather_data.RDS')
h_vel <- weather_data$h.vel
start_date = 2
end_date = 28
date_vec = start_date:end_date
ndays = end_date - start_date + 1
list_avg <- vector('list', ndays)
for (date_ind in seq_len(ndays)){
current_date <- date_vec[date_ind]
start_hr = (current_date - 2)*24 + 1
end_hr = start_hr + nhours - 1
current_hvel <- h_vel[, , start_hr:end_hr]
list_avg[[date_ind]] = sum(current_hvel)
}
list_avg
source('~/Documents/R_Codes/TAPM/moving_weather_avg.R', echo=TRUE)
list_avg <- array(0, ndays)
for (date_ind in seq_len(ndays)){
current_date <- date_vec[date_ind]
start_hr = (current_date - 2)*24 + 1
end_hr = start_hr + nhours - 1
current_hvel <- h_vel[, , start_hr:end_hr]
current_hvel <- current_hvel[-(current_hvel == 0)]
list_avg[[date_ind]] = sum(current_hvel)/length(current_hvel)
}
list_avg
plot(list_avg)
plot(list_avg, type = 'l')
max(list_avg)
min(list_avg)
current_hvel <- h_vel[, , start_hr:end_hr]
current_hvel == 0
length(current_hvel == 0)
which(length(current_hvel == 0))
length(which(current_hvel == 0))
source('~/Documents/R_Codes/TAPM/moving_weather_avg.R', echo=TRUE)
plot(list_avg, type = 'l')
source('~/Documents/R_Codes/TAPM/moving_weather_avg.R', echo=TRUE)
hvel_avg <- list_avg
source('~/Documents/R_Codes/TAPM/moving_weather_avg.R', echo=TRUE)
dim(h_vel)
lines(list_avg)
date_ind
source('~/Documents/R_Codes/TAPM/moving_weather_avg.R', echo=TRUE)
start_hr
end_hr
source('~/Documents/R_Codes/TAPM/moving_weather_avg.R', echo=TRUE)
plot(list_avg)
tke_avg = list_avg
source('~/Documents/R_Codes/TAPM/moving_weather_avg.R', echo=TRUE)
hvel_avg <- list_avg
plot(tke_avg/max(tke_avg), type = 'l')
lines(hvel_avg/max(hvel_avg))
lines(hvel_avg/max(hvel_avg), col = 'r')
lines(hvel_avg/max(hvel_avg), col = 'red')
source('~/Documents/R_Codes/TAPM/moving_weather_avg.R', echo=TRUE)
plot(list_avg, type = 'l')
lines(tke_avg, col = 'red')
plot(list_avg/max(list_avg), type = 'l')
lines(tke_avg/max(tke_avg), col = 'red')
source('~/Documents/R_Codes/TAPM/moving_weather_avg.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/moving_weather_avg.R', echo=TRUE)
lines(list_avg/max(list_avg), type = 'l')
source('~/Documents/R_Codes/TAPM/moving_weather_avg.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_program_combs_with_regions.R', echo=TRUE)
collated_realisations$offsets$rest_gains[[1]][[1]]
collated_realisations$devs$rest_gains[[1]][[1]]
collated_realisations$offsets$rest_gains[[1]][[1]]
collated_realisations$devs$rest_gains[[1]][[1]]
collated_realisations$offsets$rest_gains[[1]][[1]]
collated_realisations$devs$rest_gains[[1]][[1]]
collated_realisations$offsets$rest_gains[[1]][[1]]
collated_realisations$devs$rest_gains[[1]][[1]]
collated_realisations$devs$rest_gains[[1]][[1]][, 1]
collated_realisations$offsets$rest_gains[[1]][[1]][, 1]
collated_realisations$offsets$rest_gains[[1]][[1]][, 1:10]
collated_realisations$devs$rest_gains[[1]][[1]][, 1:10]
collated_realisations$offsets$rest_gains[[1]][[1]][, 1:10]
collated_realisations$devs$rest_gains[[1]][[1]][, 1:10]
collated_realisations$devs$nets[[1]][[1]][, 1:10]
collated_realisations$devs$rest_gains[[1]][[1]][, 1:10]
collated_realisations$devs$nets[[1]][[1]][, 1:10]
collated_realisations$devs$rest_gains[[1]][[1]][, 1:10]
collated_realisations$devs$avoided_degs[[1]][[1]][, 1:10]
collated_realisations$offsets$avoided_degs[[1]][[1]][, 1:10]
collated_realisations$offsets$rest_gains[[1]][[1]][, 1:10]
collated_realisations$offsets$rest_gains[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$avoided_degs[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$rest_gains[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$avoided_degs[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$rest_gains[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$avoided_degs[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$rest_gains[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$avoided_degs[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$rest_gains[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$avoided_degs[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$rest_gains[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$avoided_degs[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$rest_gains[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$avoided_degs[[1]][[1]][1:10, 1:10]
collated_realisations$offsets$rest_gains[[1]][[1]][1:10, 1:10]
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
collate_type = 'offsets'
use_cfac_type_in_sim = TRUE
collated_cfacs <- collate_cfacs(realisations,
realisation_num = length(realisations),
collate_type,
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial,
initial_ecology = list())
collated_parcel_sets = vector('list', 4)
offset_yrs = vector('list', realisation_num)
parcel_set_nums = vector('list', realisation_num)
parcel_sums_at_offset = vector('list', realisation_num)
realisation_num = length(realisations)
collated_cfacs <- collate_cfacs(realisations,
realisation_num = length(realisations),
collate_type,
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial,
initial_ecology = list())
collated_parcel_sets = vector('list', 4)
offset_yrs = vector('list', realisation_num)
parcel_set_nums = vector('list', realisation_num)
parcel_sums_at_offset = vector('list', realisation_num)
realisation_ind = 1
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
source('initialise_params.R')                               # functions to collate simulation outputs
source('run_system_routines_modularised.R')                 # functions to run simulation
source('collate_routines.R')                                # functions to collate simulation outputs
source('plot_routines.R')                                   # functions to plot collated outputs
land_parcels = parcels$land_parcels
collated_realisations = list()
realisation_num = length(realisations)
collated_offsets <- collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'offsets',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
collated_devs = collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'developments',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
collated_realisations <- collate_realisations(realisations, global_params, use_cfac_type_in_sim = TRUE, decline_rates_initial, land_parcels = parcels$land_parcels, initial_ecology)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
source('initialise_params.R')                               # functions to collate simulation outputs
source('run_system_routines_modularised.R')                 # functions to run simulation
source('collate_routines.R')                                # functions to collate simulation outputs
source('plot_routines.R')                                   # functions to plot collated outputs
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
collate_parcel_sets <- function(realisations, realisation_num, collate_type, global_params, program_params, use_cfac_type_in_sim, decline_rates_initial){
collated_cfacs <- collate_cfacs(realisations,
realisation_num = length(realisations),
collate_type,
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial,
initial_ecology = list())
collated_parcel_sets = vector('list', 4)
offset_yrs = vector('list', realisation_num)
parcel_set_nums = vector('list', realisation_num)
parcel_sums_at_offset = vector('list', realisation_num)
trajectories = vector('list', realisation_num)
for (realisation_ind in seq_len(realisation_num)){
current_cfacs = collated_cfacs[[realisation_ind]]$cfacs
model_outputs = realisations[[realisation_ind]]
parcel_set_indexes = select_parcel_set_indexes(model_outputs, collate_type)
parcel_set_num = length(parcel_set_indexes)
current_model_outputs = select_object_to_collate(model_outputs, collate_type, initial_ecology = list())
indexes_to_use = unlist(current_model_outputs$parcel_indexes)
current_model_outputs$trajectories = model_outputs$trajectories[indexes_to_use]
trajectories[[realisation_ind]] = sum_trajectories(traj_list = current_model_outputs$trajectories, eco_dims = global_params$eco_dims)
current_gains_degs_object <- collate_gains_degs(current_model_outputs,
collate_type,
current_model_outputs$trajectories,
cfac_list = current_cfacs,
parcel_num = length(indexes_to_use),
global_params$eco_dims,
time_steps = global_params$time_steps)
collated_gains_degs_object <- lapply(seq_along(current_gains_degs_object), function (i) combine_to_parcel_set(current_gains_degs_object[[i]], parcel_set_indexes, parcel_set_num, global_params$time_steps, global_params$eco_dims))
collated_parcel_sets <- lapply(seq_along(collated_gains_degs_object), function(i) append(collated_parcel_sets[[i]], collated_gains_degs_object[i]))
parcel_set_nums[[realisation_ind]] = parcel_set_num
offset_yrs[[realisation_ind]] = current_model_outputs$offset_yrs
parcel_sums_at_offset[[realisation_ind]] = current_model_outputs$parcel_sums_at_offset
}
names(collated_parcel_sets) = names(current_gains_degs_object)
collated_parcel_sets$parcel_set_nums = parcel_set_nums
collated_parcel_sets$offset_yrs = offset_yrs
collated_parcel_sets$parcel_sums_at_offset = parcel_sums_at_offset
collated_parcel_sets$collated_cfacs = collated_cfacs
return(collated_parcel_sets)
}
land_parcels = parcels$land_parcels
collated_realisations = list()
realisation_num = length(realisations)
collated_offsets <- collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'offsets',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
collate_parcel_sets <- function(realisations, realisation_num, collate_type, global_params, program_params, use_cfac_type_in_sim, decline_rates_initial){
collated_cfacs <- collate_cfacs(realisations,
realisation_num = length(realisations),
collate_type,
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial,
initial_ecology = list())
collated_parcel_sets = vector('list', 4)
offset_yrs = vector('list', realisation_num)
parcel_set_nums = vector('list', realisation_num)
parcel_sums_at_offset = vector('list', realisation_num)
trajectories = vector('list', realisation_num)
for (realisation_ind in seq_len(realisation_num)){
current_cfacs = collated_cfacs[[realisation_ind]]$cfacs
model_outputs = realisations[[realisation_ind]]
parcel_set_indexes = select_parcel_set_indexes(model_outputs, collate_type)
parcel_set_num = length(parcel_set_indexes)
current_model_outputs = select_object_to_collate(model_outputs, collate_type, initial_ecology = list())
indexes_to_use = unlist(current_model_outputs$parcel_indexes)
current_model_outputs$trajectories = model_outputs$trajectories[indexes_to_use]
trajectories[[realisation_ind]] = sum_trajectories(traj_list = current_model_outputs$trajectories, eco_dims = global_params$eco_dims)
current_gains_degs_object <- collate_gains_degs(current_model_outputs,
collate_type,
current_model_outputs$trajectories,
cfac_list = current_cfacs,
parcel_num = length(indexes_to_use),
global_params$eco_dims,
time_steps = global_params$time_steps)
collated_gains_degs_object <- lapply(seq_along(current_gains_degs_object), function (i) combine_to_parcel_set(current_gains_degs_object[[i]], parcel_set_indexes, parcel_set_num, global_params$time_steps, global_params$eco_dims))
collated_parcel_sets <- lapply(seq_along(collated_gains_degs_object), function(i) append(collated_parcel_sets[[i]], collated_gains_degs_object[i]))
parcel_set_nums[[realisation_ind]] = parcel_set_num
offset_yrs[[realisation_ind]] = current_model_outputs$offset_yrs
parcel_sums_at_offset[[realisation_ind]] = current_model_outputs$parcel_sums_at_offset
}
names(collated_parcel_sets) = names(current_gains_degs_object)
collated_parcel_sets$parcel_set_nums = parcel_set_nums
collated_parcel_sets$offset_yrs = offset_yrs
collated_parcel_sets$parcel_sums_at_offset = parcel_sums_at_offset
collated_parcel_sets$collated_cfacs = collated_cfacs
collated_parcel_sets$trajectories = trajectories
return(collated_parcel_sets)
}
land_parcels = parcels$land_parcels
collated_realisations = list()
realisation_num = length(realisations)
collated_offsets <- collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'offsets',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
collated_offsets$trajectories
collated_realisations$offsets$rest_gains[[1]][[1]][1:10, 1:10]
land_parcels = parcels$land_parcels
collated_realisations = list()
realisation_num = length(realisations)
collated_offsets <- collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'offsets',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
collated_devs = collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'developments',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
collated_offsets$rest_gains[[1]][[1]][1:10, 1:10]
collated_offsets$avoided_degs[[1]][[1]][1:10, 1:10]
collated_offsets$rest_gains[[1]][[1]][1:10, 1:10]
collate_type = 'offsets'
use_cfac_type_in_sim = TRUE
collated_cfacs <- collate_cfacs(realisations,
realisation_num = length(realisations),
collate_type,
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial,
initial_ecology = list())
collated_parcel_sets = vector('list', 4)
offset_yrs = vector('list', realisation_num)
parcel_set_nums = vector('list', realisation_num)
parcel_sums_at_offset = vector('list', realisation_num)
trajectories = vector('list', realisation_num)
realisation_ind = 1
current_cfacs = collated_cfacs[[realisation_ind]]$cfacs
model_outputs = realisations[[realisation_ind]]
parcel_set_indexes = select_parcel_set_indexes(model_outputs, collate_type)
parcel_set_num = length(parcel_set_indexes)
current_model_outputs = select_object_to_collate(model_outputs, collate_type, initial_ecology = list())
indexes_to_use = unlist(current_model_outputs$parcel_indexes)
current_model_outputs$trajectories = model_outputs$trajectories[indexes_to_use]
trajectories[[realisation_ind]] = sum_trajectories(traj_list = current_model_outputs$trajectories, eco_dims = global_params$eco_dims)
current_gains_degs_object <- collate_gains_degs(current_model_outputs,
collate_type,
current_model_outputs$trajectories,
cfac_list = current_cfacs,
parcel_num = length(indexes_to_use),
global_params$eco_dims,
time_steps = global_params$time_steps)
current_gains_degs_object
current_gains_degs_object$rest_gains[[1]]
current_gains_degs_object$avoided_degs[[1]]
collate_array = vector('list', parcel_num)
for (parcel_count_ind in 1:parcel_num){
collate_array[[parcel_count_ind]] = list_of_zeros(list_dims = eco_dims, array_dims = time_steps)
}
rest_gains <- collate_array
avoided_degs <- collate_array      # initialise array to store rest. gains / avoided degs
losses <- collate_array
nets <- collate_array
offset_yrs = current_model_outputs$offset_yrs                         # vector containing year offset was initialised
if (class(offset_yrs) == 'list'){
offset_yrs = unlist(offset_yrs)
}
#parcel_ecologies = unlist(current_model_outputs$parcel_ecologies, recursive = FALSE)        #remove lowest list level
parcel_ecologies = current_model_outputs$parcel_ecologies
trajectories = current_model_outputs$trajectories
cfac_list = current_cfacs
parcel_num = length(indexes_to_use)
eco_dims= global_params$eco_dims
time_steps = global_params$time_steps
collate_array = vector('list', parcel_num)
for (parcel_count_ind in 1:parcel_num){
collate_array[[parcel_count_ind]] = list_of_zeros(list_dims = eco_dims, array_dims = time_steps)
}
rest_gains <- collate_array
avoided_degs <- collate_array      # initialise array to store rest. gains / avoided degs
losses <- collate_array
nets <- collate_array
offset_yrs = current_model_outputs$offset_yrs                         # vector containing year offset was initialised
if (class(offset_yrs) == 'list'){
offset_yrs = unlist(offset_yrs)
}
#parcel_ecologies = unlist(current_model_outputs$parcel_ecologies, recursive = FALSE)        #remove lowest list level
parcel_ecologies = current_model_outputs$parcel_ecologies
parcel_count_ind =1
current_yr = offset_yrs[parcel_count_ind]                         #select current offset year
for (eco_ind in seq_len(global_params$eco_dims)){                 # cycle through ecological dimensions
current_parcel_ecology = parcel_ecologies[[parcel_count_ind]][[eco_ind]]
current_parcel_traj = trajectories[[parcel_count_ind]][[eco_ind]][current_yr:time_steps, ]
current_parcel_cfac = cfac_list[[parcel_count_ind]][[eco_ind]]
current_gains_losses <- assess_gains_losses(current_parcel_traj, current_parcel_cfac)
current_gains_degs <- separate_gains_degs(current_parcel_traj,
collate_type,
current_parcel_cfac,
current_parcel_ecology,
loss_inds = current_gains_losses$loss_inds,
current_time_horizon = (time_steps - current_yr + 1) )
rest_gains[[parcel_count_ind]][[eco_ind]][current_yr:time_steps] = current_gains_degs$rest_gains
avoided_degs[[parcel_count_ind]][[eco_ind]][current_yr:time_steps] = current_gains_degs$degs
losses[[parcel_count_ind]][[eco_ind]][current_yr:time_steps] = current_gains_losses$losses
nets[[parcel_count_ind]][[eco_ind]][current_yr:time_steps] = current_gains_losses$nets
}
current_gains_degs
current_gains_losses
gains_degs_object = list()
current_eco_array = matrix(rep(current_parcel_ecology, current_time_horizon), nrow = current_time_horizon, byrow = TRUE)
rest_gains = apply(current_parcel_traj - current_eco_array, 1, 'sum')
avoided_degs = apply(current_eco_array - current_parcel_cfac, 1, 'sum')
current_time_horizon = (time_steps - current_yr + 1)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
gains_degs_object = list()
current_eco_array = matrix(rep(current_parcel_ecology, current_time_horizon), nrow = current_time_horizon, byrow = TRUE)
rest_gains = apply(current_parcel_traj - current_eco_array, 1, 'sum')
avoided_degs = apply(current_eco_array - current_parcel_cfac, 1, 'sum')
gains_degs_object = list()
current_eco_array = matrix(rep(current_parcel_ecology, current_time_horizon), nrow = current_time_horizon, byrow = TRUE)
rest_gains = apply(current_parcel_traj - current_eco_array, 1, 'sum')
avoided_degs = apply(current_eco_array - current_parcel_cfac, 1, 'sum')
if (collate_type == 'developments'){
gains_degs_object$rest_gains = rest_gains
gains_degs_object$degs = avoided_degs
} else if (collate_type == 'offsets'){
rest_gains[loss_inds] = 0
avoided_degs[loss_inds] = 0
pure_rest = (rest_gains >= 0) & (avoided_degs < 0)
pure_degs = (rest_gains < 0)
rest_gains[pure_rest] = rest_gains[pure_rest] + avoided_degs[pure_rest]
avoided_degs[pure_rest] = 0
avoided_degs[pure_degs] = avoided_degs[pure_degs] + rest_gains[pure_degs]
rest_gains[pure_degs] = 0
gains_degs_object$rest_gains = threshold_array(rest_gains, 1e-5)
gains_degs_object$degs = threshold_array(avoided_degs, 1e-5)
}
loss_inds = current_gains_losses$loss_inds,
current_time_horizon = (time_steps - current_yr + 1)
loss_inds = current_gains_losses$loss_inds
current_time_horizon = (time_steps - current_yr + 1)
gains_degs_object = list()
current_eco_array = matrix(rep(current_parcel_ecology, current_time_horizon), nrow = current_time_horizon, byrow = TRUE)
rest_gains = apply(current_parcel_traj - current_eco_array, 1, 'sum')
avoided_degs = apply(current_eco_array - current_parcel_cfac, 1, 'sum')
if (collate_type == 'developments'){
gains_degs_object$rest_gains = rest_gains
gains_degs_object$degs = avoided_degs
} else if (collate_type == 'offsets'){
rest_gains[loss_inds] = 0
avoided_degs[loss_inds] = 0
pure_rest = (rest_gains >= 0) & (avoided_degs < 0)
pure_degs = (rest_gains < 0)
rest_gains[pure_rest] = rest_gains[pure_rest] + avoided_degs[pure_rest]
avoided_degs[pure_rest] = 0
avoided_degs[pure_degs] = avoided_degs[pure_degs] + rest_gains[pure_degs]
rest_gains[pure_degs] = 0
gains_degs_object$rest_gains = threshold_array(rest_gains, 1e-5)
gains_degs_object$degs = threshold_array(avoided_degs, 1e-5)
}
gains_degs_object
gains_degs_object = list()
current_eco_array = matrix(rep(current_parcel_ecology, current_time_horizon), nrow = current_time_horizon, byrow = TRUE)
rest_gains = apply(current_parcel_traj - current_eco_array, 1, 'sum')
avoided_degs = apply(current_eco_array - current_parcel_cfac, 1, 'sum')
rest_gains
avoided_degs
traj = apply(current_parcel_traj, 1, 'sum')
cfac = apply(current_parcel_cfac, 1, 'sum')
traj
cfac
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
