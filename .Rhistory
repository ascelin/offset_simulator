if (global_params$match_type == 'parcel_set'){
matched_parcel_set_object <- match_parcel_set(offset_pool_object, dev_credit, global_params, ind_available = index_object$ind_available[[region_ind]],
current_ecology, decline_rates_initial, parcels$land_parcels, yr, time_horizon)  #perform the matching routine - i.e. find a matching development/offset set.
current_development_object = matched_parcel_set_object$current_development_object
if (matched_parcel_set_object$match_flag == TRUE){
index_object$parcel_set_count = index_object$parcel_set_count + 1
current_development_object <- matched_parcel_set_object$development_object
current_offset_object <- matched_parcel_set_object$offset_object
current_offset_indexes = current_offset_object$parcel_indexes
if (global_params$use_offset_bank == TRUE){
banked_offset_inds_used = list_intersect(index_object$banked_offset_pool, current_offset_indexes)         # when using offset banking determine parcels used in matching routine and remove from available pool
banked_offset_inds_used = banked_offset_inds_used$match_ind
index_object$banked_offset_pool = index_object$banked_offset_pool[-banked_offset_inds_used]
} else {
index_object = update_ind_available(update_type = 'offset', index_object, current_offset_indexes, region_ind)         # determine parcels used in matching routine and remove from available pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'offset', current_offset_indexes) # set elements in decline rates array corresponding to offsets to restoration rates
}
offsets_object <- write_current_parcel_set(offsets_object, current_offset_object, index_object$parcel_set_count)      #record current offset parcels in offsets object containing all offsets info
}
}
}
if (current_development_object$match_flag == TRUE){
current_dev_indexes = current_development_object$parcel_indexes
index_object = update_ind_available(update_type = 'development', index_object, current_dev_indexes, region_ind)                 #remove development parcels from available pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'development', current_dev_indexes)     # set elements corresponding to developed parcels in decline rates array to zero.
developments_object <- write_current_parcel_set(developments_object, current_development_object, index_object$parcel_set_count)  # record development info for current parcel set into object containing all development info
dev_credit = current_development_object$dev_credit
}
}
}
for (eco_ind in seq_len(global_params$eco_dims)){
trajectories[[eco_ind]][, , yr] = current_ecology[, , eco_ind] # record current ecology in trajectories list for each eco dimension
}
current_ecology <- project_current_system(current_ecology, parcels$land_parcels, decline_rates, global_params$min_eco_val,
global_params$max_eco_val, time_horizon = 1, global_params$eco_dims)     # update ecology for subsequent time step using current decline rates
print(c(yr))
print(dev_credit)
}
}
if (global_params$offset_bank_type == 'credit'){
offsets_object <- write_current_parcel_set(offsets_object, banked_offsets_object, parcel_set_count = 1)           # if using o
}
parcel_set_flag
current_development_object$match_flag
current_dev_indexes = current_development_object$parcel_indexes
index_object = update_ind_available(update_type = 'development', index_object, current_dev_indexes, region_ind)                 #remove development parcels from available pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'development', current_dev_indexes)     # set elements corresponding to developed parcels in decline rates array to zero.
developments_object <- write_current_parcel_set(developments_object, current_development_object, index_object$parcel_set_count)  # record development info for current parcel set into object containing all development info
dev_credit = current_development_object$dev_credit
developments_object
current_development_object
developments_object <- write_current_parcel_set(developments_object, current_development_object, index_object$parcel_set_count)  # record development info for current parcel set into object containing all development info
parcel_set_count_index
parcel_set_count
index_object$parcel_set_count
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
index_object
yr = 1
offset_bank_num = global_params$banked_offset_vec[yr]
current_ecology = initial_ecology
decline_rates = decline_rates_initial
perform_offsets = TRUE
region_ind = 1
current_dev_nums <- find_current_dev_nums(global_params$region_num, yr)
current_develop_num = current_dev_nums[region_ind]
land_parcels = parcels$land_parcels
time_horizon = 20
trajectories <- initialise_trajectories(global_params$eco_dims, global_params$ecology_size, global_params$time_steps, initial_ecologies)    # initialise trajectories as a list of N 3D arrays to fill for each eco dimension
offsets_object <- initialise_parcel_set_object()   #initialise offsets object to store all offsets
developments_object <- initialise_parcel_set_object() #initialise developments object to store all offsets
credited_developments_object <- initialise_parcel_set_object()
banked_offsets_object <- initialise_banked_offsets_object(global_params)
index_object <- initialise_index_object(parcels, global_params)
dev_credit = 0
decline_rates = decline_rates_initial
for (yr in seq_len(global_params$time_steps)){          #run through main time loop
current_dev_nums <- find_current_dev_nums(global_params$dev_vec, global_params$region_num, yr) #developments to perform in current year per region
time_horizon <- assess_time_horizon(global_params$use_offset_time_horizon, global_params$offset_time_horizon, global_params$time_steps, yr)   # determine whetehr time horizons to use in calcs are till simulation end or user provided length of time
for (region_ind in seq_len(parcels$region_num)){            #cycle through each region
if (global_params$use_offset_bank == TRUE){               # perform offset banking routine if selected
offset_bank_num = global_params$banked_offset_vec[yr]   # how many offsets to be added in current year
if (offset_bank_num > 0){
total_current_pool = index_object$ind_available[[region_ind]]             # determine parcel indexes currently available
index_object$parcel_num_remaining = length(total_current_pool)            # record how many parcels remaining
current_banked_offset_pool <- select_banked_offset_indexes(offset_bank_num, total_current_pool)   # select current number of offset parcels from current available pool to add to banked offset pool
current_banked_offset <- record_current_parcel_set(land_parcels = parcels$land_parcels, current_ecology, current_pool = current_banked_offset_pool,
parcel_num_remaining = index_object$parcel_num_remaining, yr)   # arrange current parcel data
banked_offsets_object <- update_banked_offsets(banked_offsets_object, current_banked_offset)      #record current parcel data into banked offset object
index_object <- update_banked_offset_pool(index_object, current_banked_offset_pool)   # add new offset parcels to banked offset pool
index_object <- update_ind_available(update_type = 'offset', index_object, current_banked_offset_pool, region_ind) #remove selected offest parcels from avilable pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'offset', current_banked_offset_pool) # update decline rate for current banked offset parcels
}
}
current_develop_num = current_dev_nums[region_ind]        # how many parcels to be developed in current year
if (current_develop_num > 0){
for (parcel_set_count_index in seq_len(current_develop_num)){   # cycle through number of developments and associated offsets
if (global_params$use_offset_bank == TRUE){
current_offset_pool = index_object$banked_offset_pool       # available pool when using offset banking
if (length(current_offset_pool) == 0){break}              #break out when no parcels are left in banking pool
offset_pool_object <- prepare_offset_bank(banked_offsets_object, current_offset_pool, restoration_flag = global_params$offset_restoration_flag,
land_parcels, current_ecology, eco_dims = global_params$eco_dims)   #arrange current banked offset data into form to use in parcel set determination
offset_pool_type = 'offset_bank'
} else {
current_offset_pool = index_object$ind_available[[region_ind]]
parcel_num_remaining = length(current_offset_pool)
offset_pool_object <- record_current_parcel_set(land_parcels = parcels$land_parcels, current_ecology, current_offset_pool, parcel_num_remaining, yr)   #arrange available parcel pool into form to use in parcel set determination
offset_pool_type = 'offsets'
}
offset_pool_object <- assess_current_pool(pool_object = offset_pool_object, pool_type = offset_pool_type, calc_type = global_params$offset_calc_type, cfacs_flag = global_params$offset_cfacs_flag,
adjust_cfacs_flag = global_params$adjust_cfacs_flag, cfac_type = global_params$cfac_type_in_offset_calc, time_horizon_type = global_params$offset_time_horizon_type,
global_params, decline_rates_initial, time_horizon, yr)      #determine available parcel values, depending on what particular offset policy is in use using counterfactuals etc.
if (global_params$use_dev_credit == TRUE){
if (global_params$use_offset_bank == TRUE){
net_development_val = sum(unlist(developments_object$parcel_vals_used))
current_pool_vals = unlist(offset_pool_object$parcel_vals_used)
dev_credit = sum(current_pool_vals) - net_development_val
}
current_development_object = develop_from_credit(dev_credit, global_params, ind_available = index_object$ind_available[[region_ind]], current_ecology, decline_rates_initial,
land_parcels = parcels$land_parcels, yr, time_horizon)
dev_credit = current_development_object$dev_credit
if (current_development_object$match_flag == TRUE){
index_object$credited_parcel_set_count = index_object$credited_parcel_set_count + 1
}
} else {
current_development_object = list()
current_development_object$match_flag = FALSE
}
parcel_set_flag = ((current_development_object$match_flag == FALSE) & (global_params$use_parcel_sets == TRUE))
if (parcel_set_flag == TRUE){  #if insufficient credits accumulated, perform offset parcel set match
if (global_params$match_type == 'parcel_set'){
matched_parcel_set_object <- match_parcel_set(offset_pool_object, dev_credit, global_params, ind_available = index_object$ind_available[[region_ind]],
current_ecology, decline_rates_initial, parcels$land_parcels, yr, time_horizon)  #perform the matching routine - i.e. find a matching development/offset set.
current_development_object = matched_parcel_set_object$current_development_object
if (current_development_object$match_flag == TRUE){
index_object$parcel_set_count = index_object$parcel_set_count + 1
current_offset_object <- matched_parcel_set_object$offset_object
current_offset_indexes = current_offset_object$parcel_indexes
if (global_params$use_offset_bank == TRUE){
banked_offset_inds_used = list_intersect(index_object$banked_offset_pool, current_offset_indexes)         # when using offset banking determine parcels used in matching routine and remove from available pool
banked_offset_inds_used = banked_offset_inds_used$match_ind
index_object$banked_offset_pool = index_object$banked_offset_pool[-banked_offset_inds_used]
} else {
index_object = update_ind_available(update_type = 'offset', index_object, current_offset_indexes, region_ind)         # determine parcels used in matching routine and remove from available pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'offset', current_offset_indexes) # set elements in decline rates array corresponding to offsets to restoration rates
}
offsets_object <- write_current_parcel_set(offsets_object, current_offset_object, index_object$parcel_set_count)      #record current offset parcels in offsets object containing all offsets info
}
}
}
if (current_development_object$match_flag == TRUE){
current_dev_indexes = current_development_object$parcel_indexes
index_object = update_ind_available(update_type = 'development', index_object, current_dev_indexes, region_ind)                 #remove development parcels from available pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'development', current_dev_indexes)     # set elements corresponding to developed parcels in decline rates array to zero.
if (global_params$match_type == 'parcel_set'){
developments_object <- write_current_parcel_set(developments_object, current_development_object, index_object$parcel_set_count)  # record development info for current parcel set into object containing all development info
} else {
credited_developments_object = write_current_parcel_set(credited_developments_object, current_development_object, parcel_set_count = index_object$credited_parcel_set_count)
}
dev_credit = current_development_object$dev_credit
}
}
}
for (eco_ind in seq_len(global_params$eco_dims)){
trajectories[[eco_ind]][, , yr] = current_ecology[, , eco_ind] # record current ecology in trajectories list for each eco dimension
}
current_ecology <- project_current_system(current_ecology, parcels$land_parcels, decline_rates, global_params$min_eco_val,
global_params$max_eco_val, time_horizon = 1, global_params$eco_dims)     # update ecology for subsequent time step using current decline rates
print(c(yr))
print(dev_credit)
}
}
global_params$match_type
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
yr = 1
offset_bank_num = global_params$banked_offset_vec[yr]
current_ecology = initial_ecology
decline_rates = decline_rates_initial
perform_offsets = TRUE
region_ind = 1
current_dev_nums <- find_current_dev_nums(global_params$region_num, yr)
current_develop_num = current_dev_nums[region_ind]
land_parcels = parcels$land_parcels
time_horizon = 20
trajectories <- initialise_trajectories(global_params$eco_dims, global_params$ecology_size, global_params$time_steps, initial_ecologies)    # initialise trajectories as a list of N 3D arrays to fill for each eco dimension
offsets_object <- initialise_parcel_set_object()   #initialise offsets object to store all offsets
developments_object <- initialise_parcel_set_object() #initialise developments object to store all offsets
credited_developments_object <- initialise_parcel_set_object()
banked_offsets_object <- initialise_banked_offsets_object(global_params)
index_object <- initialise_index_object(parcels, global_params)
dev_credit = 0
decline_rates = decline_rates_initial
for (yr in seq_len(global_params$time_steps)){          #run through main time loop
current_dev_nums <- find_current_dev_nums(global_params$dev_vec, global_params$region_num, yr) #developments to perform in current year per region
time_horizon <- assess_time_horizon(global_params$use_offset_time_horizon, global_params$offset_time_horizon, global_params$time_steps, yr)   # determine whetehr time horizons to use in calcs are till simulation end or user provided length of time
for (region_ind in seq_len(parcels$region_num)){            #cycle through each region
if (global_params$use_offset_bank == TRUE){               # perform offset banking routine if selected
offset_bank_num = global_params$banked_offset_vec[yr]   # how many offsets to be added in current year
if (offset_bank_num > 0){
total_current_pool = index_object$ind_available[[region_ind]]             # determine parcel indexes currently available
index_object$parcel_num_remaining = length(total_current_pool)            # record how many parcels remaining
current_banked_offset_pool <- select_banked_offset_indexes(offset_bank_num, total_current_pool)   # select current number of offset parcels from current available pool to add to banked offset pool
current_banked_offset <- record_current_parcel_set(land_parcels = parcels$land_parcels, current_ecology, current_pool = current_banked_offset_pool,
parcel_num_remaining = index_object$parcel_num_remaining, yr)   # arrange current parcel data
banked_offsets_object <- update_banked_offsets(banked_offsets_object, current_banked_offset)      #record current parcel data into banked offset object
index_object <- update_banked_offset_pool(index_object, current_banked_offset_pool)   # add new offset parcels to banked offset pool
index_object <- update_ind_available(update_type = 'offset', index_object, current_banked_offset_pool, region_ind) #remove selected offest parcels from avilable pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'offset', current_banked_offset_pool) # update decline rate for current banked offset parcels
}
}
current_develop_num = current_dev_nums[region_ind]        # how many parcels to be developed in current year
if (current_develop_num > 0){
for (parcel_set_count_index in seq_len(current_develop_num)){   # cycle through number of developments and associated offsets
if (global_params$use_offset_bank == TRUE){
current_offset_pool = index_object$banked_offset_pool       # available pool when using offset banking
if (length(current_offset_pool) == 0){break}              #break out when no parcels are left in banking pool
offset_pool_object <- prepare_offset_bank(banked_offsets_object, current_offset_pool, restoration_flag = global_params$offset_restoration_flag,
land_parcels, current_ecology, eco_dims = global_params$eco_dims)   #arrange current banked offset data into form to use in parcel set determination
offset_pool_type = 'offset_bank'
} else {
current_offset_pool = index_object$ind_available[[region_ind]]
parcel_num_remaining = length(current_offset_pool)
offset_pool_object <- record_current_parcel_set(land_parcels = parcels$land_parcels, current_ecology, current_offset_pool, parcel_num_remaining, yr)   #arrange available parcel pool into form to use in parcel set determination
offset_pool_type = 'offsets'
}
offset_pool_object <- assess_current_pool(pool_object = offset_pool_object, pool_type = offset_pool_type, calc_type = global_params$offset_calc_type, cfacs_flag = global_params$offset_cfacs_flag,
adjust_cfacs_flag = global_params$adjust_cfacs_flag, cfac_type = global_params$cfac_type_in_offset_calc, time_horizon_type = global_params$offset_time_horizon_type,
global_params, decline_rates_initial, time_horizon, yr)      #determine available parcel values, depending on what particular offset policy is in use using counterfactuals etc.
if (global_params$use_dev_credit == TRUE){
if (global_params$use_offset_bank == TRUE){
net_development_val = sum(unlist(developments_object$parcel_vals_used))
current_pool_vals = unlist(offset_pool_object$parcel_vals_used)
dev_credit = sum(current_pool_vals) - net_development_val
}
current_development_object = develop_from_credit(dev_credit, global_params, ind_available = index_object$ind_available[[region_ind]], current_ecology, decline_rates_initial,
land_parcels = parcels$land_parcels, yr, time_horizon)
dev_credit = current_development_object$dev_credit
if (current_development_object$match_flag == TRUE){
index_object$credited_parcel_set_count = index_object$credited_parcel_set_count + 1
}
} else {
current_development_object = list()
current_development_object$match_flag = FALSE
}
parcel_set_flag = ((current_development_object$match_flag == FALSE) & (global_params$use_parcel_sets == TRUE))
if (parcel_set_flag == TRUE){  #if insufficient credits accumulated, perform offset parcel set match
matched_parcel_set_object <- match_parcel_set(offset_pool_object, dev_credit, global_params, ind_available = index_object$ind_available[[region_ind]],
current_ecology, decline_rates_initial, parcels$land_parcels, yr, time_horizon)  #perform the matching routine - i.e. find a matching development/offset set.
current_development_object = matched_parcel_set_object$current_development_object
if (current_development_object$match_flag == TRUE){
index_object$parcel_set_count = index_object$parcel_set_count + 1
current_offset_object <- matched_parcel_set_object$offset_object
current_offset_indexes = current_offset_object$parcel_indexes
if (global_params$use_offset_bank == TRUE){
banked_offset_inds_used = list_intersect(index_object$banked_offset_pool, current_offset_indexes)         # when using offset banking determine parcels used in matching routine and remove from available pool
banked_offset_inds_used = banked_offset_inds_used$match_ind
index_object$banked_offset_pool = index_object$banked_offset_pool[-banked_offset_inds_used]
} else {
index_object = update_ind_available(update_type = 'offset', index_object, current_offset_indexes, region_ind)         # determine parcels used in matching routine and remove from available pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'offset', current_offset_indexes) # set elements in decline rates array corresponding to offsets to restoration rates
}
offsets_object <- write_current_parcel_set(offsets_object, current_offset_object, index_object$parcel_set_count)      #record current offset parcels in offsets object containing all offsets info
}
}
if (current_development_object$match_flag == TRUE){
current_dev_indexes = current_development_object$parcel_indexes
index_object = update_ind_available(update_type = 'development', index_object, current_dev_indexes, region_ind)                 #remove development parcels from available pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'development', current_dev_indexes)     # set elements corresponding to developed parcels in decline rates array to zero.
if (global_params$match_type == 'parcel_set'){
developments_object <- write_current_parcel_set(developments_object, current_development_object, index_object$parcel_set_count)  # record development info for current parcel set into object containing all development info
} else {
credited_developments_object = write_current_parcel_set(credited_developments_object, current_development_object, parcel_set_count = index_object$credited_parcel_set_count)
}
dev_credit = current_development_object$dev_credit
}
}
}
for (eco_ind in seq_len(global_params$eco_dims)){
trajectories[[eco_ind]][, , yr] = current_ecology[, , eco_ind] # record current ecology in trajectories list for each eco dimension
}
current_ecology <- project_current_system(current_ecology, parcels$land_parcels, decline_rates, global_params$min_eco_val,
global_params$max_eco_val, time_horizon = 1, global_params$eco_dims)     # update ecology for subsequent time step using current decline rates
print(c(yr))
print(dev_credit)
}
}
if (global_params$offset_bank_type == 'credit'){
offsets_object <- write_current_parcel_set(offsets_object, banked_offsets_object, parcel_set_count = 1)           # if using o
}
yr = 1
offset_bank_num = global_params$banked_offset_vec[yr]
current_ecology = initial_ecology
decline_rates = decline_rates_initial
perform_offsets = TRUE
region_ind = 1
current_dev_nums <- find_current_dev_nums(global_params$region_num, yr)
current_develop_num = current_dev_nums[region_ind]
land_parcels = parcels$land_parcels
time_horizon = 20
trajectories <- initialise_trajectories(global_params$eco_dims, global_params$ecology_size, global_params$time_steps, initial_ecologies)    # initialise trajectories as a list of N 3D arrays to fill for each eco dimension
offsets_object <- initialise_parcel_set_object()   #initialise offsets object to store all offsets
developments_object <- initialise_parcel_set_object() #initialise developments object to store all offsets
credited_developments_object <- initialise_parcel_set_object()
banked_offsets_object <- initialise_banked_offsets_object(global_params)
index_object <- initialise_index_object(parcels, global_params)
dev_credit = 0
decline_rates = decline_rates_initial
for (yr in seq_len(global_params$time_steps)){          #run through main time loop
current_dev_nums <- find_current_dev_nums(global_params$dev_vec, global_params$region_num, yr) #developments to perform in current year per region
time_horizon <- assess_time_horizon(global_params$use_offset_time_horizon, global_params$offset_time_horizon, global_params$time_steps, yr)   # determine whetehr time horizons to use in calcs are till simulation end or user provided length of time
for (region_ind in seq_len(parcels$region_num)){            #cycle through each region
if (global_params$use_offset_bank == TRUE){               # perform offset banking routine if selected
offset_bank_num = global_params$banked_offset_vec[yr]   # how many offsets to be added in current year
if (offset_bank_num > 0){
total_current_pool = index_object$ind_available[[region_ind]]             # determine parcel indexes currently available
index_object$parcel_num_remaining = length(total_current_pool)            # record how many parcels remaining
current_banked_offset_pool <- select_banked_offset_indexes(offset_bank_num, total_current_pool)   # select current number of offset parcels from current available pool to add to banked offset pool
current_banked_offset <- record_current_parcel_set(land_parcels = parcels$land_parcels, current_ecology, current_pool = current_banked_offset_pool,
parcel_num_remaining = index_object$parcel_num_remaining, yr)   # arrange current parcel data
banked_offsets_object <- update_banked_offsets(banked_offsets_object, current_banked_offset)      #record current parcel data into banked offset object
index_object <- update_banked_offset_pool(index_object, current_banked_offset_pool)   # add new offset parcels to banked offset pool
index_object <- update_ind_available(update_type = 'offset', index_object, current_banked_offset_pool, region_ind) #remove selected offest parcels from avilable pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'offset', current_banked_offset_pool) # update decline rate for current banked offset parcels
}
}
current_develop_num = current_dev_nums[region_ind]        # how many parcels to be developed in current year
if (current_develop_num > 0){
for (parcel_set_count_index in seq_len(current_develop_num)){   # cycle through number of developments and associated offsets
if (global_params$use_offset_bank == TRUE){
current_offset_pool = index_object$banked_offset_pool       # available pool when using offset banking
if (length(current_offset_pool) == 0){break}              #break out when no parcels are left in banking pool
offset_pool_object <- prepare_offset_bank(banked_offsets_object, current_offset_pool, restoration_flag = global_params$offset_restoration_flag,
land_parcels, current_ecology, eco_dims = global_params$eco_dims)   #arrange current banked offset data into form to use in parcel set determination
offset_pool_type = 'offset_bank'
} else {
current_offset_pool = index_object$ind_available[[region_ind]]
parcel_num_remaining = length(current_offset_pool)
offset_pool_object <- record_current_parcel_set(land_parcels = parcels$land_parcels, current_ecology, current_offset_pool, parcel_num_remaining, yr)   #arrange available parcel pool into form to use in parcel set determination
offset_pool_type = 'offsets'
}
offset_pool_object <- assess_current_pool(pool_object = offset_pool_object, pool_type = offset_pool_type, calc_type = global_params$offset_calc_type, cfacs_flag = global_params$offset_cfacs_flag,
adjust_cfacs_flag = global_params$adjust_cfacs_flag, cfac_type = global_params$cfac_type_in_offset_calc, time_horizon_type = global_params$offset_time_horizon_type,
global_params, decline_rates_initial, time_horizon, yr)      #determine available parcel values, depending on what particular offset policy is in use using counterfactuals etc.
if (global_params$use_dev_credit == TRUE){
if (global_params$use_offset_bank == TRUE){
net_development_val = sum(unlist(developments_object$parcel_vals_used))
current_pool_vals = unlist(offset_pool_object$parcel_vals_used)
dev_credit = sum(current_pool_vals) - net_development_val
}
current_development_object = develop_from_credit(dev_credit, global_params, ind_available = index_object$ind_available[[region_ind]], current_ecology, decline_rates_initial,
land_parcels = parcels$land_parcels, yr, time_horizon)
dev_credit = current_development_object$dev_credit
if (current_development_object$match_flag == TRUE){
index_object$credited_parcel_set_count = index_object$credited_parcel_set_count + 1
}
} else {
current_development_object = list()
current_development_object$match_flag = FALSE
}
parcel_set_flag = ((current_development_object$match_flag == FALSE) & (global_params$use_parcel_sets == TRUE))
if (parcel_set_flag == TRUE){  #if insufficient credits accumulated, perform offset parcel set match
matched_parcel_set_object <- match_parcel_set(offset_pool_object, dev_credit, global_params, ind_available = index_object$ind_available[[region_ind]],
current_ecology, decline_rates_initial, parcels$land_parcels, yr, time_horizon)  #perform the matching routine - i.e. find a matching development/offset set.
current_development_object = matched_parcel_set_object$current_development_object
if (current_development_object$match_flag == TRUE){
index_object$parcel_set_count = index_object$parcel_set_count + 1
current_offset_object <- matched_parcel_set_object$offset_object
current_offset_indexes = current_offset_object$parcel_indexes
if (global_params$use_offset_bank == TRUE){
banked_offset_inds_used = list_intersect(index_object$banked_offset_pool, current_offset_indexes)         # when using offset banking determine parcels used in matching routine and remove from available pool
banked_offset_inds_used = banked_offset_inds_used$match_ind
index_object$banked_offset_pool = index_object$banked_offset_pool[-banked_offset_inds_used]
} else {
index_object = update_ind_available(update_type = 'offset', index_object, current_offset_indexes, region_ind)         # determine parcels used in matching routine and remove from available pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'offset', current_offset_indexes) # set elements in decline rates array corresponding to offsets to restoration rates
}
offsets_object <- write_current_parcel_set(offsets_object, current_offset_object, index_object$parcel_set_count)      #record current offset parcels in offsets object containing all offsets info
}
}
if (current_development_object$match_flag == TRUE){
current_dev_indexes = current_development_object$parcel_indexes
index_object = update_ind_available(update_type = 'development', index_object, current_dev_indexes, region_ind)                 #remove development parcels from available pool
decline_rates <- update_decline_rates(decline_rates, global_params, decline_rate_type = 'development', current_dev_indexes)     # set elements corresponding to developed parcels in decline rates array to zero.
if (global_params$use_parcel_sets){
developments_object <- write_current_parcel_set(developments_object, current_development_object, index_object$parcel_set_count)  # record development info for current parcel set into object containing all development info
} else {
credited_developments_object = write_current_parcel_set(credited_developments_object, current_development_object, parcel_set_count = index_object$credited_parcel_set_count)
}
dev_credit = current_development_object$dev_credit
}
}
}
for (eco_ind in seq_len(global_params$eco_dims)){
trajectories[[eco_ind]][, , yr] = current_ecology[, , eco_ind] # record current ecology in trajectories list for each eco dimension
}
current_ecology <- project_current_system(current_ecology, parcels$land_parcels, decline_rates, global_params$min_eco_val,
global_params$max_eco_val, time_horizon = 1, global_params$eco_dims)     # update ecology for subsequent time step using current decline rates
print(c(yr))
print(dev_credit)
}
}
if (global_params$offset_bank_type == 'credit'){
offsets_object <- write_current_parcel_set(offsets_object, banked_offsets_object, parcel_set_count = 1)           # if using o
}
offsets_object
developments_object
credited_developments_object
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
realisations[[1]]$credited_developments_object$parcel_set_count
collated_realisations = list()
realisation_num = length(realisations)
eco_dims = global_params$eco_dims
collated_offset_realisations = collate_realisations_parcel_sets(realisations, parcel_set_type = 'offsets', global_params, decline_rates_initial, land_parcels, initial_ecology)
collated_dev_realisations = collate_realisations_parcel_sets(realisations, parcel_set_type = 'developments', global_params, decline_rates_initial, land_parcels, initial_ecology)
(global_params$use_offset_bank == TRUE) & (global_params$offset_bank_type == 'credit')
realisation_num = length(realisations)
collated_realisation_parcel_sets = initialise_collated_realisations_object(realisation_num)
realisation_ind = 1
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
realisation_num = length(realisations)
collated_realisation_parcel_sets = initialise_collated_realisations_object(realisation_num)
parcel_set_type = 'developments'
realisation_ind = 1
model_outputs = realisations[[realisation_ind]]
if (parcel_set_type == 'offsets'){
current_model_outputs = model_outputs$offsets
cfac_type = global_params$cfac_type_in_offset_calc
} else {
if ((global_params$use_offset_bank == TRUE) & (global_params$offset_bank_type == 'credit')){
current_model_outputs = model_outputs$credited_developments_object
} else{
current_model_outputs = model_outputs$developments
}
cfac_type = global_params$cfac_type_in_dev_calc
}
cfac_type
unlist(current_model_outputs$parcel_indexes)
current_model_outputs$parcel_set_count
realisation_num = length(realisations)
collated_realisation_parcel_sets = initialise_collated_realisations_object(realisation_num)
for (realisation_ind in seq_len(realisation_num)){
model_outputs = realisations[[realisation_ind]]
if (parcel_set_type == 'offsets'){
current_model_outputs = model_outputs$offsets
cfac_type = global_params$cfac_type_in_offset_calc
} else {
if ((global_params$use_offset_bank == TRUE) & (global_params$offset_bank_type == 'credit')){
current_model_outputs = model_outputs$credited_developments_object
} else{
current_model_outputs = model_outputs$developments
}
cfac_type = global_params$cfac_type_in_dev_calc
}
parcel_set_indexes = unlist(current_model_outputs$parcel_indexes)
parcel_set_num = current_model_outputs$parcel_set_count
current_model_outputs$traj_list = model_outputs$traj_list[parcel_set_indexes]
time_horizons = generate_time_horizons(use_offset_bank = TRUE, offset_time_horizon_type = 'current', yr = global_params$time_steps, offset_yrs = unlist(current_model_outputs$offset_yrs),
time_horizon = (global_params$time_steps - 1), parcel_count = length(unlist(current_model_outputs$offset_yrs)))
current_cfacs = calc_cfacs(parcel_indexes = parcel_set_indexes, parcel_ecologies = unlist(current_model_outputs$parcel_ecologies, recursive = FALSE), parcel_num_remaining = current_model_outputs$parcel_num_remaining, global_params,
decline_rates_initial, time_horizons, offset_yrs = current_model_outputs$offset_yrs, cfac_type)
collated_realisation_parcel_sets <- collate_realisations_object(collated_realisation_parcel_sets, realisation_ind, current_model_outputs, current_cfacs,
land_parcels, global_params, decline_rates_initial, parcel_set_num)
}
collated_realisations = list()
realisation_num = length(realisations)
eco_dims = global_params$eco_dims
collated_offset_realisations = collate_realisations_parcel_sets(realisations, parcel_set_type = 'offsets', global_params, decline_rates_initial, land_parcels, initial_ecology)
collated_dev_realisations = collate_realisations_parcel_sets(realisations, parcel_set_type = 'developments', global_params, decline_rates_initial, land_parcels, initial_ecology)
initial_parcel_ecologies = ecology_to_parcels(initial_ecology, land_parcels)
time_horizons <- generate_time_horizons(use_offset_bank = FALSE, global_params$offset_time_horizon_type, yr = 1, offset_yrs = 1,
time_horizon = (global_params$time_steps - 1), parcel_count = length(land_parcels))
cfacs <- build_cfacs_list(global_params, decline_rates = decline_rates_initial, initial_parcel_ecologies, parcel_indexes = 1:length(land_parcels), time_horizons)
cfac_trajs <- sum_trajectories_as_list(cfacs, eco_dims = global_params$eco_dims)
summed_offset_realisations <- group_degs_gains(current_collated_reals = collated_offset_realisations, time_steps = global_params$time_steps, eco_dims = global_params$eco_dims)
summed_dev_realisations <- group_degs_gains(current_collated_reals = collated_dev_realisations, time_steps = global_params$time_steps, eco_dims = global_params$eco_dims)
net_realisation_gains <- assess_net_gains(summed_offset_realisations$net_outcome, summed_dev_realisations$net_outcome)
system_NNLs <- assess_NNL(net_realisation_gains$standard, assess_NNL_type = 'system', eco_dims = global_params$eco_dims, assess_num = realisation_num,
time_steps = global_params$time_steps, offset_yrs = vector())
landscape_vals = assess_landscape_realisations_vals(realisations, eco_dims = global_params$eco_dims, parcel_indexes = 1:length(land_parcels), time_horizon = global_params$time_steps)
collated_realisations$collated_program_sums <- collate_program_sum_realisations(traj_type = 'trajectory', realisations, cfacs, time_steps = global_params$time_steps, eco_dims = global_params$eco_dims)    #group individual net realisation counterfactual values
collated_realisations$collated_program_cfac_sums <- collate_program_sum_realisations(traj_type = 'cfac', realisations, cfacs, time_steps = global_params$time_steps, eco_dims = global_params$eco_dims)
if (global_params$use_parcel_sets == TRUE){
collated_realisations$parcel_set_NNL_yrs <- assess_parcel_set_NNL_yrs(collated_offset_realisations, collated_dev_realisations, parcel_set_nums = collated_offset_realisations$parcel_set_nums,
time_steps = global_params$time_steps, realisation_num,  eco_dims = global_params$eco_dims)
}
realisations[[1]]$developments
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
realisations[[1]]$offsets
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_model.R', echo=TRUE)
