parcel_num_remaining = current_model_outputs$parcel_num_remaining,
global_params,
current_program_params,
decline_rates_initial[unlist(current_model_outputs$parcel_indexes)],
time_horizons,
offset_yrs,
cfac_params$include_potential_developments,
cfac_params$include_potential_offsets,
cfac_params$include_illegal_clearing,
cfac_params$adjust_cfacs_flag)
current_model_outputs$parcel_ecologies
current_model_outputs
model_outputs
collate_type
model_outputs$illegal_clearing
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
collate_all_cfacs <- function(use_cfac_type_in_sim, initial_ecology, decline_rates_initial, global_params, collated_offset_cfacs, collated_dev_cfacs, eco_dims){
time_horizons <- generate_time_horizons(time_horizon_type = 'offsets',
project_type = 'future',
yr = 1,
offset_yrs = 1,
time_horizon = (global_params$time_steps - 1),
parcel_count = length(initial_ecology) )
cfacs_decline <- calc_parcel_trajs(current_parcel_ecologies = initial_ecology,
parcel_traj_type = 'protect',
current_decline_rates = decline_rates_initial,
time_horizons,
global_params,
vector(),
time_fill = TRUE)
decline_cfac_trajs = sum_trajectories(cfacs_decline, eco_dims = global_params$eco_dims)
#   all_cfacs <- collate_cfacs(realisations,
#                              realisation_num = length(realisations),
#                              collate_type = 'all',
#                              global_params,
#                              program_params,
#                              use_cfac_type_in_sim = TRUE,
#                              decline_rates_initial,
#                              initial_ecology)
offset_cfacs <- form_cfacs(realisations, collate_type = 'offsets', use_cfac_type_in_sim, collated_cfac_object = collated_offset_cfacs, decline_cfac_trajs, eco_dims)
dev_cfacs <- form_cfacs(realisations, collate_type = 'developments', use_cfac_type_in_sim, collated_cfac_object = collated_dev_cfacs, decline_cfac_trajs, eco_dims)
offset_cfac_sum <- sum_cfacs(offset_cfacs)
dev_cfac_sum <- sum_cfacs(dev_cfacs)
program_cfac_sum <- sum_nested_lists(list(offset_cfac_sum, dev_cfac_sum))
program_cfac_sum_rel_initial <- nested_list_rel_initial(list_in = program_cfac_sum, eco_dims)
net_cfac_decline_sum <- nested_list_sum(decline_cfac_trajs)
if (global_params$perform_illegal_clearing == TRUE){
#     illegal_cfacs <- collate_cfacs(realisations,
#                                    realisation_num = length(realisations),
#                                    collate_type = 'illegal_clearing',
#                                    global_params,
#                                    program_params,
#                                    use_cfac_type_in_sim = TRUE,
#                                    decline_rates_initial,
#                                    initial_ecology)
illegal_cfacs <- form_cfacs(realisations, collate_type = 'illegal_clearing', use_cfac_type_in_sim, collated_cfac_object = illegal_cfacs, decline_cfac_trajs, eco_dims)
illegal_cfac_sum <- sum_cfacs(illegal_cfacs)
} else {
illegal_cfac_sum = list()
}
cfacs_object = list()
cfacs_object$program_cfac_sum <- program_cfac_sum
cfacs_object$program_cfac_sum_rel_initial = program_cfac_sum_rel_initial
cfacs_object$decline_cfac_trajs <- decline_cfac_trajs
cfacs_object$net_cfac_decline_sum <- net_cfac_decline_sum
cfacs_object$net_illegal_cfac_sum <- illegal_cfac_sum
return(cfacs_object)
}
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
land_parcels = parcels$land_parcels
collated_realisations = list()
realisation_num = length(realisations)
collated_offsets <- collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'offsets',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
collated_devs = collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'developments',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
parcel_set_outcomes <- sum_nested_lists(list(collated_offsets$nets, collated_devs$nets))
parcel_set_NNL = assess_parcel_set_NNL(net_outcomes = parcel_set_outcomes,
offset_yrs = collated_offsets$offset_yrs,
parcel_set_nums = collated_offsets$parcel_set_nums,
time_steps = global_params$time_steps,
realisation_num,
eco_dims = global_params$eco_dims,
offset_time_horizon = global_params$offset_time_horizon)
net_offset_gains <- sum_gains_degs(current_collated_reals = collated_offsets,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)
net_dev_losses <- sum_gains_degs(current_collated_reals = collated_devs,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)
net_program_outcomes <- sum_nested_lists( list(net_offset_gains$net_outcome, net_dev_losses$net_outcome) )
program_NNL <- assess_system_NNL(net_program_outcomes,
realisation_num,
time_steps = global_params$time_steps,
offset_time_horizon = global_params$offset_time_horizon,
eco_dims = global_params$eco_dims)
net_landscape = sum_landscape(realisations,
eco_dims = global_params$eco_dims,
parcel_indexes = 1:length(land_parcels),
time_horizon = global_params$time_steps)
program_sums <- collate_program(traj_type = 'trajectory',
realisations,
trajectory_object = realisations,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)    #group individual net realisation counterfactual values
cfacs_object <- collate_all_cfacs(use_cfac_type_in_sim,
initial_ecology,
decline_rates_initial,
global_params,
collated_offset_cfacs = collated_offsets$collated_cfacs,
collated_dev_cfacs = collated_devs$collated_cfacs,
eco_dims = global_params$eco_dims)
landscape_rel_to_counter <- subtract_nested_lists(net_landscape, rep(list(cfacs_object$net_cfac_decline_sum), realisation_num))
system_NNL <- assess_system_NNL(landscape_rel_to_counter,
realisation_num,
time_steps = global_params$time_steps,
offset_time_horizon = global_params$offset_time_horizon,
eco_dims = global_params$eco_dims)
net_program_loss = assess_landscape_loss(cfacs_object$program_cfac_sum,
program_NNL$NNL_yrs,
realisation_num,
eco_dims = global_params$eco_dims,
time_steps = global_params$time_steps)
landscape_loss = assess_landscape_loss(net_landscape,
system_NNL$NNL_yrs,
realisation_num,
eco_dims = global_params$eco_dims,
time_steps = global_params$time_steps)
if (global_params$perform_illegal_clearing == TRUE){
illegally_cleared_trajs <- sum_parcel_sets(traj_type = 'trajectory',
collate_type = 'illegal_clearing',
sum_type = 'individual',
realisations,
trajectory_object = realisations,
time_steps = global_params$time_steps,
eco_dims= global_params$eco_dims)
illegally_cleared_sum <-  sum_parcel_sets(traj_type = 'trajectory',
collate_type = 'illegal_clearing',
sum_type = 'net',
realisations,
trajectory_object = realisations,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)
illegal_sum_rel_to_counter <- subtract_nested_lists(illegally_cleared_sum, cfacs_object$net_illegal_cfac_sum)
illegal_sum_rel_initial <- nested_list_rel_initial(list_in = illegally_cleared_sum, global_params$eco_dims)
} else{
illegal_sum_rel_to_counter = list()
illegal_sum_rel_initial = list()
illegally_cleared_trajs = list()
illegally_cleared_sum = list()
}
collated_realisations$parcel_set_outcomes = parcel_set_outcomes
collated_realisations$landscape_loss = landscape_loss
collated_realisations$net_program_loss = net_program_loss
collated_realisations$landscape_rel_to_counter = landscape_rel_to_counter
collated_realisations$program_cfac_sums = cfacs_object$program_cfac_sum
collated_realisations$program_cfac_sum_rel_initial = cfacs_object$program_cfac_sum_rel_initial
collated_realisations$net_cfac_sum = cfacs_object$net_cfac_decline_sum
collated_realisations$program_NNL = program_NNL
collated_realisations$system_NNL = system_NNL
collated_realisations$cfac_trajs = cfacs_object$decline_cfac_trajs
collated_realisations$parcel_set_NNL = parcel_set_NNL
collated_realisations$program_sums = program_sums
collated_realisations$illegal_sum_rel_to_counter = illegal_sum_rel_to_counter
collated_realisations$illegal_sum_rel_initial = illegal_sum_rel_initial
collated_realisations$net_program_outcomes = net_program_outcomes
collated_realisations$offsets = collated_offsets
collated_realisations$devs = collated_devs
collated_realisations$illegally_cleared_trajs = illegally_cleared_trajs
collated_realisations$net_offset_gains = net_offset_gains
collated_realisations$net_dev_losses = net_dev_losses
collated_realisations$net_landscape = net_landscape
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
source('initialise_params.R')                               # functions to collate simulation outputs
source('run_system_routines_modularised.R')                 # functions to run simulation
source('collate_routines.R')                                # functions to collate simulation outputs
source('plot_routines.R')                                   # functions to plot collated outputs
collated_realisations <- collate_realisations(realisations, global_params, use_cfac_type_in_sim = TRUE, decline_rates_initial, land_parcels = parcels$land_parcels, initial_ecology)
plot_characteristics <- get_plot_characteristics(program_params, realisations)
plot_collated_realisations(collated_realisations,
realisation_num = length(realisations),
global_params,
program_params,
parcel_sum_lims = c(0, 20000),
eco_ind = 1,
lwd_vec = c(3, 0.5),
edge_title = plot_characteristics)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_program_combs_with_regions.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_program_combs_with_regions.R', echo=TRUE)
collated_realisations <- collate_realisations(realisations, global_params, use_cfac_type_in_sim = TRUE, decline_rates_initial, land_parcels = parcels$land_parcels, initial_ecology)
land_parcels = parcels$land_parcels
collated_realisations = list()
realisation_num = length(realisations)
collated_offsets <- collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'offsets',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
collated_devs = collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'developments',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
parcel_set_outcomes <- sum_nested_lists(list(collated_offsets$nets, collated_devs$nets))
parcel_set_NNL = assess_parcel_set_NNL(net_outcomes = parcel_set_outcomes,
offset_yrs = collated_offsets$offset_yrs,
parcel_set_nums = collated_offsets$parcel_set_nums,
time_steps = global_params$time_steps,
realisation_num,
eco_dims = global_params$eco_dims,
offset_time_horizon = global_params$offset_time_horizon)
net_offset_gains <- sum_gains_degs(current_collated_reals = collated_offsets,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)
net_dev_losses <- sum_gains_degs(current_collated_reals = collated_devs,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)
net_program_outcomes <- sum_nested_lists( list(net_offset_gains$net_outcome, net_dev_losses$net_outcome) )
program_NNL <- assess_system_NNL(net_program_outcomes,
realisation_num,
time_steps = global_params$time_steps,
offset_time_horizon = global_params$offset_time_horizon,
eco_dims = global_params$eco_dims)
net_landscape = sum_landscape(realisations,
eco_dims = global_params$eco_dims,
parcel_indexes = 1:length(land_parcels),
time_horizon = global_params$time_steps)
use_cfac_type_in_sim = TRUE
land_parcels = parcels$land_parcels
collated_realisations = list()
realisation_num = length(realisations)
collated_offsets <- collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'offsets',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
collated_devs = collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'developments',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
parcel_set_outcomes <- sum_nested_lists(list(collated_offsets$nets, collated_devs$nets))
parcel_set_NNL = assess_parcel_set_NNL(net_outcomes = parcel_set_outcomes,
offset_yrs = collated_offsets$offset_yrs,
parcel_set_nums = collated_offsets$parcel_set_nums,
time_steps = global_params$time_steps,
realisation_num,
eco_dims = global_params$eco_dims,
offset_time_horizon = global_params$offset_time_horizon)
net_offset_gains <- sum_gains_degs(current_collated_reals = collated_offsets,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)
net_dev_losses <- sum_gains_degs(current_collated_reals = collated_devs,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)
net_program_outcomes <- sum_nested_lists( list(net_offset_gains$net_outcome, net_dev_losses$net_outcome) )
program_NNL <- assess_system_NNL(net_program_outcomes,
realisation_num,
time_steps = global_params$time_steps,
offset_time_horizon = global_params$offset_time_horizon,
eco_dims = global_params$eco_dims)
net_landscape = sum_landscape(realisations,
eco_dims = global_params$eco_dims,
parcel_indexes = 1:length(land_parcels),
time_horizon = global_params$time_steps)
program_sums <- collate_program(traj_type = 'trajectory',
realisations,
trajectory_object = realisations,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)    #group individual net realisation counterfactual values
cfacs_object <- collate_all_cfacs(use_cfac_type_in_sim,
initial_ecology,
decline_rates_initial,
global_params,
collated_offset_cfacs = collated_offsets$collated_cfacs,
collated_dev_cfacs = collated_devs$collated_cfacs,
eco_dims = global_params$eco_dims)
landscape_rel_to_counter <- subtract_nested_lists(net_landscape, rep(list(cfacs_object$net_cfac_decline_sum), realisation_num))
system_NNL <- assess_system_NNL(landscape_rel_to_counter,
realisation_num,
time_steps = global_params$time_steps,
offset_time_horizon = global_params$offset_time_horizon,
eco_dims = global_params$eco_dims)
net_program_loss = assess_landscape_loss(cfacs_object$program_cfac_sum,
program_NNL$NNL_yrs,
realisation_num,
eco_dims = global_params$eco_dims,
time_steps = global_params$time_steps)
landscape_loss = assess_landscape_loss(net_landscape,
system_NNL$NNL_yrs,
realisation_num,
eco_dims = global_params$eco_dims,
time_steps = global_params$time_steps)
collated_offset_cfacs = collated_offsets$collated_cfacs
collated_dev_cfacs = collated_devs$collated_cfacs
eco_dims = global_params$eco_dims
time_horizons <- generate_time_horizons(time_horizon_type = 'offsets',
project_type = 'future',
yr = 1,
offset_yrs = 1,
time_horizon = (global_params$time_steps - 1),
parcel_count = length(initial_ecology) )
cfacs_decline <- calc_parcel_trajs(current_parcel_ecologies = initial_ecology,
parcel_traj_type = 'protect',
current_decline_rates = decline_rates_initial,
time_horizons,
global_params,
vector(),
time_fill = TRUE)
decline_cfac_trajs = sum_trajectories(cfacs_decline, eco_dims = global_params$eco_dims)
#   all_cfacs <- collate_cfacs(realisations,
#                              realisation_num = length(realisations),
#                              collate_type = 'all',
#                              global_params,
#                              program_params,
#                              use_cfac_type_in_sim = TRUE,
#                              decline_rates_initial,
#                              initial_ecology)
offset_cfacs <- form_cfacs(realisations, collate_type = 'offsets', use_cfac_type_in_sim, collated_cfac_object = collated_offset_cfacs, decline_cfac_trajs, eco_dims)
dev_cfacs <- form_cfacs(realisations, collate_type = 'developments', use_cfac_type_in_sim, collated_cfac_object = collated_dev_cfacs, decline_cfac_trajs, eco_dims)
offset_cfac_sum <- sum_cfacs(offset_cfacs)
dev_cfac_sum <- sum_cfacs(dev_cfacs)
program_cfac_sum <- sum_nested_lists(list(offset_cfac_sum, dev_cfac_sum))
program_cfac_sum_rel_initial <- nested_list_rel_initial(list_in = program_cfac_sum, eco_dims)
net_cfac_decline_sum <- nested_list_sum(decline_cfac_trajs)
if (global_params$perform_illegal_clearing == TRUE){
collated_illegal_cfacs <- collate_cfacs(realisations,
realisation_num = length(realisations),
collate_type = 'illegal_clearing',
global_params,
program_params,
use_cfac_type_in_sim = TRUE,
decline_rates_initial,
initial_ecology)
illegal_cfacs <- form_cfacs(realisations, collate_type = 'illegal_clearing', use_cfac_type_in_sim, collated_cfac_object = collated_illegal_cfacs, decline_cfac_trajs, eco_dims)
illegal_cfac_sum <- sum_cfacs(illegal_cfacs)
} else {
illegal_cfac_sum = list()
}
collate_all_cfacs <- function(use_cfac_type_in_sim, initial_ecology, decline_rates_initial, global_params, collated_offset_cfacs, collated_dev_cfacs, eco_dims){
time_horizons <- generate_time_horizons(time_horizon_type = 'offsets',
project_type = 'future',
yr = 1,
offset_yrs = 1,
time_horizon = (global_params$time_steps - 1),
parcel_count = length(initial_ecology) )
cfacs_decline <- calc_parcel_trajs(current_parcel_ecologies = initial_ecology,
parcel_traj_type = 'protect',
current_decline_rates = decline_rates_initial,
time_horizons,
global_params,
vector(),
time_fill = TRUE)
decline_cfac_trajs = sum_trajectories(cfacs_decline, eco_dims = global_params$eco_dims)
#   all_cfacs <- collate_cfacs(realisations,
#                              realisation_num = length(realisations),
#                              collate_type = 'all',
#                              global_params,
#                              program_params,
#                              use_cfac_type_in_sim = TRUE,
#                              decline_rates_initial,
#                              initial_ecology)
offset_cfacs <- form_cfacs(realisations, collate_type = 'offsets', use_cfac_type_in_sim, collated_cfac_object = collated_offset_cfacs, decline_cfac_trajs, eco_dims)
dev_cfacs <- form_cfacs(realisations, collate_type = 'developments', use_cfac_type_in_sim, collated_cfac_object = collated_dev_cfacs, decline_cfac_trajs, eco_dims)
offset_cfac_sum <- sum_cfacs(offset_cfacs)
dev_cfac_sum <- sum_cfacs(dev_cfacs)
program_cfac_sum <- sum_nested_lists(list(offset_cfac_sum, dev_cfac_sum))
program_cfac_sum_rel_initial <- nested_list_rel_initial(list_in = program_cfac_sum, eco_dims)
net_cfac_decline_sum <- nested_list_sum(decline_cfac_trajs)
if (global_params$perform_illegal_clearing == TRUE){
collated_illegal_cfacs <- collate_cfacs(realisations,
realisation_num = length(realisations),
collate_type = 'illegal_clearing',
global_params,
program_params,
use_cfac_type_in_sim = TRUE,
decline_rates_initial,
initial_ecology)
illegal_cfacs <- form_cfacs(realisations, collate_type = 'illegal_clearing', use_cfac_type_in_sim, collated_cfac_object = collated_illegal_cfacs, decline_cfac_trajs, eco_dims)
illegal_cfac_sum <- sum_cfacs(illegal_cfacs)
} else {
illegal_cfac_sum = list()
}
cfacs_object = list()
cfacs_object$program_cfac_sum <- program_cfac_sum
cfacs_object$program_cfac_sum_rel_initial = program_cfac_sum_rel_initial
cfacs_object$decline_cfac_trajs <- decline_cfac_trajs
cfacs_object$net_cfac_decline_sum <- net_cfac_decline_sum
cfacs_object$net_illegal_cfac_sum <- illegal_cfac_sum
return(cfacs_object)
}
land_parcels = parcels$land_parcels
collated_realisations = list()
realisation_num = length(realisations)
collated_offsets <- collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'offsets',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
collated_devs = collate_parcel_sets(realisations,
realisation_num = length(realisations),
collate_type = 'developments',
global_params,
program_params,
use_cfac_type_in_sim,
decline_rates_initial)
parcel_set_outcomes <- sum_nested_lists(list(collated_offsets$nets, collated_devs$nets))
parcel_set_NNL = assess_parcel_set_NNL(net_outcomes = parcel_set_outcomes,
offset_yrs = collated_offsets$offset_yrs,
parcel_set_nums = collated_offsets$parcel_set_nums,
time_steps = global_params$time_steps,
realisation_num,
eco_dims = global_params$eco_dims,
offset_time_horizon = global_params$offset_time_horizon)
net_offset_gains <- sum_gains_degs(current_collated_reals = collated_offsets,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)
net_dev_losses <- sum_gains_degs(current_collated_reals = collated_devs,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)
net_program_outcomes <- sum_nested_lists( list(net_offset_gains$net_outcome, net_dev_losses$net_outcome) )
program_NNL <- assess_system_NNL(net_program_outcomes,
realisation_num,
time_steps = global_params$time_steps,
offset_time_horizon = global_params$offset_time_horizon,
eco_dims = global_params$eco_dims)
net_landscape = sum_landscape(realisations,
eco_dims = global_params$eco_dims,
parcel_indexes = 1:length(land_parcels),
time_horizon = global_params$time_steps)
program_sums <- collate_program(traj_type = 'trajectory',
realisations,
trajectory_object = realisations,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)    #group individual net realisation counterfactual values
cfacs_object <- collate_all_cfacs(use_cfac_type_in_sim,
initial_ecology,
decline_rates_initial,
global_params,
collated_offset_cfacs = collated_offsets$collated_cfacs,
collated_dev_cfacs = collated_devs$collated_cfacs,
eco_dims = global_params$eco_dims)
landscape_rel_to_counter <- subtract_nested_lists(net_landscape, rep(list(cfacs_object$net_cfac_decline_sum), realisation_num))
system_NNL <- assess_system_NNL(landscape_rel_to_counter,
realisation_num,
time_steps = global_params$time_steps,
offset_time_horizon = global_params$offset_time_horizon,
eco_dims = global_params$eco_dims)
net_program_loss = assess_landscape_loss(cfacs_object$program_cfac_sum,
program_NNL$NNL_yrs,
realisation_num,
eco_dims = global_params$eco_dims,
time_steps = global_params$time_steps)
landscape_loss = assess_landscape_loss(net_landscape,
system_NNL$NNL_yrs,
realisation_num,
eco_dims = global_params$eco_dims,
time_steps = global_params$time_steps)
if (global_params$perform_illegal_clearing == TRUE){
illegally_cleared_trajs <- sum_parcel_sets(traj_type = 'trajectory',
collate_type = 'illegal_clearing',
sum_type = 'individual',
realisations,
trajectory_object = realisations,
time_steps = global_params$time_steps,
eco_dims= global_params$eco_dims)
illegally_cleared_sum <-  sum_parcel_sets(traj_type = 'trajectory',
collate_type = 'illegal_clearing',
sum_type = 'net',
realisations,
trajectory_object = realisations,
time_steps = global_params$time_steps,
eco_dims = global_params$eco_dims)
illegal_sum_rel_to_counter <- subtract_nested_lists(illegally_cleared_sum, cfacs_object$net_illegal_cfac_sum)
illegal_sum_rel_initial <- nested_list_rel_initial(list_in = illegally_cleared_sum, global_params$eco_dims)
} else{
illegal_sum_rel_to_counter = list()
illegal_sum_rel_initial = list()
illegally_cleared_trajs = list()
illegally_cleared_sum = list()
}
source('~/Documents/R_Codes/Offsets_Working_Feb_3/collate_routines.R')
source('initialise_params.R')                               # functions to collate simulation outputs
source('run_system_routines_modularised.R')                 # functions to run simulation
source('collate_routines.R')                                # functions to collate simulation outputs
source('plot_routines.R')                                   # functions to plot collated outputs
collated_realisations <- collate_realisations(realisations, global_params, use_cfac_type_in_sim = TRUE, decline_rates_initial, land_parcels = parcels$land_parcels, initial_ecology)
plot_characteristics <- get_plot_characteristics(program_params, realisations)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_program_combs_with_regions.R', echo=TRUE)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_program_combs_with_regions.R', echo=TRUE)
collated_realisations <- collate_realisations(realisations, global_params, use_cfac_type_in_sim = TRUE, decline_rates_initial, land_parcels = parcels$land_parcels, initial_ecology)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_program_combs_with_regions.R', echo=TRUE)
