names(met_vecs_2) = names(weather_data[met_inds_to_test])
#met_vecs_2 <- as.data.frame(met_vecs_2)
met_vecs_net = append(met_vecs_1, met_vecs_2)
summary(met_vecs_net)
summary(met_vecs_1)
ny = 101
nx = 99
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 3, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
met_inds_to_test = c(1:5, 12)
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_1 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]]))
names(met_vecs_1) = names(weather_data[met_inds_to_test])
#met_vecs_1 <- as.data.frame(met_vecs_1)
inds_to_use = seed_map$seed.map > 0
ny = 101
nx = 99
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 3, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
summary(weighted_met)
met_inds_to_test = c(1:5, 12)
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_1 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]]))
names(met_vecs_1) = names(weather_data[met_inds_to_test])
summary(met_vecs_1)
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 18, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_2 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]]))
names(met_vecs_2) = names(weather_data[met_inds_to_test])
summary(met_vecs_1)
summary(met_vecs_2)
met_vecs_net = append(met_vecs_1, met_vecs_2)
met_vecs_net
names(met_vecs_net)
cor(met_vecs_net)
cor(as.data.frame(met_vecs_net))
corrplot(cor(as.data.frame(met_vecs_net)))
names(weather_data)
names(weather_data)[17]
names(weather_data)[15]
names(weather_data)[14]
setwd('~/Documents/R_Codes/TAPM/')
rm(list = ls())
WD = getwd()
library(gbm)
library(dismo)
library(corrplot)
source('~/Documents/R_Codes/General/setup_sub_plots.R')
source('weight_meteorology.R')
start_date = 3
end_date = 5
ndays = end_date - start_date + 1
nhours = ndays*24
seed_type  = 'day'
weight_type = 'weighted' #'constant' or 'weighted'
meteorology_type = 'weather' #'turbulence' or 'weather'
# weather_file = paste('~/TAPM/october_weather_matlab_files/surface_weather.mat', sep = '')
# weather_data = R.matlab::readMat(weather_file)
#
# weather_data <- weather_data$surface.weather[, , 1]
# weather_data = lapply(weather_data, unlist, use.names=FALSE)
# weather_data = weather_data[-c(1, 2, 11)] #remove date, hour and tke duplicate
weather_data <- readRDS('~/Documents/R_Codes/TAPM/weather_data.RDS')
TRI_data <- R.matlab::readMat('~/Documents/R_Codes/TAPM/TRI.mat')
weather_data$TRI = TRI_data[[1]]
seed_map_file = paste('~/seeds/OCT_', start_date, '_', end_date, '/', seed_type, '_seeds/s_map.mat', sep = '')
seed_map <- R.matlab::readMat(seed_map_file)
inds_to_use = seed_map$seed.map > 0
ny = 101
nx = 99
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 3, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
met_inds_to_test = c(1:5, 12, 14)
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_1 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]]))
names(met_vecs_1) = names(weather_data[met_inds_to_test])
#met_vecs_1 <- as.data.frame(met_vecs_1)
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 18, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_2 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]]))
names(met_vecs_2) = names(weather_data[met_inds_to_test])
#met_vecs_2 <- as.data.frame(met_vecs_2)
met_vecs_net = append(met_vecs_1, met_vecs_2)
corrplot(cor(met_vecs_net))
corrplot(cor(as.data.frame(met_vecs_net)))
weather_data <- readRDS('~/Documents/R_Codes/TAPM/weather_data.RDS')
TRI_data <- R.matlab::readMat('~/Documents/R_Codes/TAPM/TRI.mat')
weather_data$TRI = TRI_data[[1]]
seed_map_file = paste('~/seeds/OCT_', start_date, '_', end_date, '/', seed_type, '_seeds/s_map.mat', sep = '')
seed_map <- R.matlab::readMat(seed_map_file)
inds_to_use = seed_map$seed.map > 0
ny = 101
nx = 99
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 3, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
met_inds_to_test = c(1:5, 12, 14)
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_1 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]][inds_to_use]))
names(met_vecs_1) = names(weather_data[met_inds_to_test])
#met_vecs_1 <- as.data.frame(met_vecs_1)
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 18, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_2 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]][inds_to_use]))
names(met_vecs_2) = names(weather_data[met_inds_to_test])
#met_vecs_2 <- as.data.frame(met_vecs_2)
met_vecs_net = append(met_vecs_1, met_vecs_2)
corrplot(cor(as.data.frame(met_vecs_net)))
names(met_vecs_1)
names(met_vecs_net) = c("TKE_LOW",   "EPS_LOW",   "UU_LOW" ,   "WW_LOW" ,   "US2_LOW" ,  "h.vel_LOW", "theta_LOW", "TKE_HIGH",   "EPS_HIGH",   "UU_HIGH" ,   "WW_HIGH" ,   "US2_HIGH" ,  "h.vel_HIGH", "theta_HIGH")
corrplot(cor(as.data.frame(met_vecs_net)))
setwd('~/Documents/R_Codes/TAPM/')
rm(list = ls())
WD = getwd()
library(gbm)
library(dismo)
library(corrplot)
source('~/Documents/R_Codes/General/setup_sub_plots.R')
source('weight_meteorology.R')
start_date = 3
end_date = 5
ndays = end_date - start_date + 1
nhours = ndays*24
seed_type  = 'day'
weight_type = 'constant' #'constant' or 'weighted'
meteorology_type = 'weather' #'turbulence' or 'weather'
# weather_file = paste('~/TAPM/october_weather_matlab_files/surface_weather.mat', sep = '')
# weather_data = R.matlab::readMat(weather_file)
#
# weather_data <- weather_data$surface.weather[, , 1]
# weather_data = lapply(weather_data, unlist, use.names=FALSE)
# weather_data = weather_data[-c(1, 2, 11)] #remove date, hour and tke duplicate
weather_data <- readRDS('~/Documents/R_Codes/TAPM/weather_data.RDS')
TRI_data <- R.matlab::readMat('~/Documents/R_Codes/TAPM/TRI.mat')
weather_data$TRI = TRI_data[[1]]
seed_map_file = paste('~/seeds/OCT_', start_date, '_', end_date, '/', seed_type, '_seeds/s_map.mat', sep = '')
seed_map <- R.matlab::readMat(seed_map_file)
inds_to_use = seed_map$seed.map > 0
ny = 101
nx = 99
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 3, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
met_inds_to_test = c(1:5, 12, 14)
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_1 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]][inds_to_use]))
names(met_vecs_1) = names(weather_data[met_inds_to_test])
#met_vecs_1 <- as.data.frame(met_vecs_1)
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 18, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_2 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]][inds_to_use]))
names(met_vecs_2) = names(weather_data[met_inds_to_test])
#met_vecs_2 <- as.data.frame(met_vecs_2)
met_vecs_net = append(met_vecs_1, met_vecs_2)
names(met_vecs_net) = c("TKE_LOW",   "EPS_LOW",   "UU_LOW" ,   "WW_LOW" ,   "US2_LOW" ,  "h.vel_LOW", "theta_LOW", "TKE_HIGH",   "EPS_HIGH",   "UU_HIGH" ,   "WW_HIGH" ,   "US2_HIGH" ,  "h.vel_HIGH", "theta_HIGH")
corrplot(cor(as.data.frame(met_vecs_net)))
setwd('~/Documents/R_Codes/TAPM/')
rm(list = ls())
WD = getwd()
library(gbm)
library(dismo)
library(corrplot)
source('~/Documents/R_Codes/General/setup_sub_plots.R')
source('weight_meteorology.R')
start_date = 3
end_date = 5
ndays = end_date - start_date + 1
nhours = ndays*24
seed_type  = 'constant'
weight_type = 'constant' #'constant' or 'weighted'
meteorology_type = 'weather' #'turbulence' or 'weather'
# weather_file = paste('~/TAPM/october_weather_matlab_files/surface_weather.mat', sep = '')
# weather_data = R.matlab::readMat(weather_file)
#
# weather_data <- weather_data$surface.weather[, , 1]
# weather_data = lapply(weather_data, unlist, use.names=FALSE)
# weather_data = weather_data[-c(1, 2, 11)] #remove date, hour and tke duplicate
weather_data <- readRDS('~/Documents/R_Codes/TAPM/weather_data.RDS')
TRI_data <- R.matlab::readMat('~/Documents/R_Codes/TAPM/TRI.mat')
weather_data$TRI = TRI_data[[1]]
seed_map_file = paste('~/seeds/OCT_', start_date, '_', end_date, '/', seed_type, '_seeds/s_map.mat', sep = '')
seed_map <- R.matlab::readMat(seed_map_file)
inds_to_use = seed_map$seed.map > 0
ny = 101
nx = 99
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 3, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
met_inds_to_test = c(1:5, 12, 14)
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_1 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]][inds_to_use]))
names(met_vecs_1) = names(weather_data[met_inds_to_test])
#met_vecs_1 <- as.data.frame(met_vecs_1)
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 18, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_2 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]][inds_to_use]))
names(met_vecs_2) = names(weather_data[met_inds_to_test])
#met_vecs_2 <- as.data.frame(met_vecs_2)
met_vecs_net = append(met_vecs_1, met_vecs_2)
names(met_vecs_net) = c("TKE_LOW",   "EPS_LOW",   "UU_LOW" ,   "WW_LOW" ,   "US2_LOW" ,  "h.vel_LOW", "theta_LOW", "TKE_HIGH",   "EPS_HIGH",   "UU_HIGH" ,   "WW_HIGH" ,   "US2_HIGH" ,  "h.vel_HIGH", "theta_HIGH")
corrplot(cor(as.data.frame(met_vecs_net)))
setwd('~/Documents/R_Codes/TAPM/')
rm(list = ls())
WD = getwd()
library(gbm)
library(dismo)
library(corrplot)
source('~/Documents/R_Codes/General/setup_sub_plots.R')
source('weight_meteorology.R')
start_date = 3
end_date = 5
ndays = end_date - start_date + 1
nhours = ndays*24
seed_type  = 'day'
weight_type = 'constant' #'constant' or 'weighted'
meteorology_type = 'weather' #'turbulence' or 'weather'
# weather_file = paste('~/TAPM/october_weather_matlab_files/surface_weather.mat', sep = '')
# weather_data = R.matlab::readMat(weather_file)
#
# weather_data <- weather_data$surface.weather[, , 1]
# weather_data = lapply(weather_data, unlist, use.names=FALSE)
# weather_data = weather_data[-c(1, 2, 11)] #remove date, hour and tke duplicate
weather_data <- readRDS('~/Documents/R_Codes/TAPM/weather_data.RDS')
TRI_data <- R.matlab::readMat('~/Documents/R_Codes/TAPM/TRI.mat')
weather_data$TRI = TRI_data[[1]]
seed_map_file = paste('~/seeds/OCT_', start_date, '_', end_date, '/', seed_type, '_seeds/s_map.mat', sep = '')
seed_map <- R.matlab::readMat(seed_map_file)
inds_to_use = seed_map$seed.map > 0
ny = 101
nx = 99
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 3, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
met_inds_to_test = c(1:5, 12, 14)
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_1 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]][inds_to_use]))
names(met_vecs_1) = names(weather_data[met_inds_to_test])
#met_vecs_1 <- as.data.frame(met_vecs_1)
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 18, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_2 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]][inds_to_use]))
names(met_vecs_2) = names(weather_data[met_inds_to_test])
#met_vecs_2 <- as.data.frame(met_vecs_2)
met_vecs_net = append(met_vecs_1, met_vecs_2)
names(met_vecs_net) = c("TKE_LOW",   "EPS_LOW",   "UU_LOW" ,   "WW_LOW" ,   "US2_LOW" ,  "h.vel_LOW", "theta_LOW", "TKE_HIGH",   "EPS_HIGH",   "UU_HIGH" ,   "WW_HIGH" ,   "US2_HIGH" ,  "h.vel_HIGH", "theta_HIGH")
corrplot(cor(as.data.frame(met_vecs_net)))
setwd('~/Documents/R_Codes/TAPM/')
rm(list = ls())
WD = getwd()
library(gbm)
library(dismo)
library(corrplot)
source('~/Documents/R_Codes/General/setup_sub_plots.R')
source('weight_meteorology.R')
start_date = 3
end_date = 5
ndays = end_date - start_date + 1
nhours = ndays*24
seed_type  = 'day'
weight_type = 'weighted' #'constant' or 'weighted'
meteorology_type = 'weather' #'turbulence' or 'weather'
# weather_file = paste('~/TAPM/october_weather_matlab_files/surface_weather.mat', sep = '')
# weather_data = R.matlab::readMat(weather_file)
#
# weather_data <- weather_data$surface.weather[, , 1]
# weather_data = lapply(weather_data, unlist, use.names=FALSE)
# weather_data = weather_data[-c(1, 2, 11)] #remove date, hour and tke duplicate
weather_data <- readRDS('~/Documents/R_Codes/TAPM/weather_data.RDS')
TRI_data <- R.matlab::readMat('~/Documents/R_Codes/TAPM/TRI.mat')
weather_data$TRI = TRI_data[[1]]
seed_map_file = paste('~/seeds/OCT_', start_date, '_', end_date, '/', seed_type, '_seeds/s_map.mat', sep = '')
seed_map <- R.matlab::readMat(seed_map_file)
inds_to_use = seed_map$seed.map > 0
ny = 101
nx = 99
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 3, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
met_inds_to_test = c(1:5, 12, 14)
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_1 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]][inds_to_use]))
names(met_vecs_1) = names(weather_data[met_inds_to_test])
#met_vecs_1 <- as.data.frame(met_vecs_1)
weighted_means = vector('list', length(weather_data))
weighted_met = vector('list', length(weather_data))
for (name_ind in seq_along(weather_data)){
current_meteorology = weather_data[[name_ind]]
if (length(dim(current_meteorology)) > 2 ){
weighted_object = weight_meteorology(meteorology_data = current_meteorology, weight_type, start_date = 18, ndays = 3, nhours = 72)
weighted_means[[name_ind]] = weighted_object$weighted_mean
weighted_met[[name_ind]] = weighted_object$weighted_met
} else {
weighted_means[[name_ind]] = current_meteorology
}
}
weighted_met <- weighted_met[met_inds_to_test]
met_vecs_2 <- lapply(seq_along(weighted_met), function(i) as.vector(weighted_met[[i]][inds_to_use]))
names(met_vecs_2) = names(weather_data[met_inds_to_test])
#met_vecs_2 <- as.data.frame(met_vecs_2)
met_vecs_net = append(met_vecs_1, met_vecs_2)
names(met_vecs_net) = c("TKE_LOW",   "EPS_LOW",   "UU_LOW" ,   "WW_LOW" ,   "US2_LOW" ,  "h.vel_LOW", "theta_LOW", "TKE_HIGH",   "EPS_HIGH",   "UU_HIGH" ,   "WW_HIGH" ,   "US2_HIGH" ,  "h.vel_HIGH", "theta_HIGH")
corrplot(cor(as.data.frame(met_vecs_net)))
file_name
file_dir = paste('~/Documents/Willow_PDF/correlations', '_', weight_type, '.pdf', sep = '', collapse = '')
file_dir
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
cor(as.data.frame(met_vecs_net))
cor(as.data.frame(met_vecs_net))
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
cor(as.data.frame(met_vecs_net))
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
cor(as.data.frame(met_vecs_net))
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('~/Documents/R_Codes/TAPM/correlate_weather.R', echo=TRUE)
source('make_movie.R')
setwd('~/Documents/R_Codes/Offsets_Working_Feb_3/')
rm(list = ls())
WD = getwd()
library(foreach)
library(doParallel)
library(abind)
library(pixmap)
source('initialise_params.R')                               # functions to collate simulation outputs
source('run_system_routines_modularised.R')                 # functions to run simulation
source('collate_routines.R')                                # functions to collate simulation outputs
source('plot_routines.R')                                   # functions to plot collated outputs
source('make_movie.R')
run_from_saved = FALSE                                      # run from previous data or run from newly generated ecology etc.
save_initial_conditions = FALSE                             # use this to run from simulated data (calculated at the initialisation of the code) or load data (eg from zonation etc)
write_pdf = TRUE                                           # write graphical outputs to pdf (TRUE)
load_from_data = FALSE                                      # use this to run from simulated data (calculated at the initialisation of the code) or load data (eg from zonation etc)
write_params_to_table = FALSE
overwrite_table = FALSE
write_movie = FALSE                                      # write evolving ecology to movie
show_movie = FALSE                                      # show output in movie form of evolving ecology
write_offset_layer = FALSE                                    # write layer containing all offset parcels to pdf
table_file = '~/Documents/run_summary.csv'
print_folder = '~/Documents/offset_plots_dec_20/'
getwd()
rm(list = ls())
getwd()
