assess_current_gain_pool <- function(current_ecology, pool_object, pool_type, calc_type, cfacs_flag, adjust_cfacs_flag,
include_potential_developments,include_potential_offsets,include_illegal_clearing,
time_horizon_type, global_params, current_program_params, decline_rates_initial, time_horizon, yr){
current_pool = unlist(pool_object$parcel_indexes)
parcel_count = length(current_pool)
offset_yrs = unlist(pool_object$offset_yrs)
time_horizons <- generate_time_horizons(time_horizon_type = pool_type, project_type = 'current', yr, offset_yrs, time_horizon, parcel_count)
if (cfacs_flag == TRUE){
cfacs_object = calc_cfacs(parcel_ecologies = pool_object$parcel_ecologies,
parcel_num_remaining = pool_object$parcel_num_remaining,
global_params,
current_program_params,
decline_rates = decline_rates_initial[current_pool],
time_horizons,
offset_yrs,
include_potential_developments,
include_potential_offsets,
include_illegal_clearing,
adjust_cfacs_flag)
cfac_vals = nested_list_tail(cfacs_object$cfac_trajs)
}
restoration_vals = current_ecology[unlist(current_offset_object$parcel_indexes)]
restoration_vals = lapply(seq_along(restoration_vals), function(i) lapply(seq_along(restoration_vals[[i]]), function(j) sum(restoration_vals[[i]][[j]] )))
parcel_vals_achieved = evaluate_parcel_vals(calc_type, pool_object$parcel_sums_at_offset, restoration_vals, cfac_vals)
return(parcel_vals_achieved)
}
parcel_vals_achieved <- assess_current_gain_pool(current_ecology,
pool_object = current_offset_object,
pool_type = "offset_bank",
calc_type = current_program_params$offset_calc_type,
cfacs_flag = current_program_params$offset_cfacs_flag,
adjust_cfacs_flag = current_program_params$adjust_offset_cfacs_flag,
include_potential_developments = current_program_params$include_potential_developments_in_offset_calc,
include_potential_offsets = current_program_params$include_potential_offsets_in_offset_calc,
include_illegal_clearing = current_program_params$include_illegal_clearing_in_offset_calc,
time_horizon_type = current_program_params$offset_time_horizon_type,
global_params,
current_program_params,
decline_rates_initial,
time_horizon,
yr)
assess_offset_gains <- function(current_ecology, offsets_object, offset_indexes, global_params, current_program_params, decline_rates_initial, time_horizon, yr){
assessed_offsets_object <- list()
eco_dims = global_params$eco_dims
parcel_set_count = length(offset_indexes)
assessed_offsets <- vector('list', parcel_set_count)
parcel_sets_to_assess = seq_len(parcel_set_count)
for (parcel_set_ind in parcel_sets_to_assess){
current_parcel_indexes <- unlist(offset_indexes[[parcel_set_ind]])
current_parcel_set <- which(unlist(offsets_object$parcel_indexes) %in% current_parcel_indexes)
current_offset_object <- lapply(seq_along(offsets_object), function(i) offsets_object[[i]][current_parcel_set])
names(current_offset_object) <- names(offsets_object)
parcel_vals_achieved <- assess_current_gain_pool(current_ecology,
pool_object = current_offset_object,
pool_type = "offset_bank",
calc_type = current_program_params$offset_calc_type,
cfacs_flag = current_program_params$offset_cfacs_flag,
adjust_cfacs_flag = current_program_params$adjust_offset_cfacs_flag,
include_potential_developments = current_program_params$include_potential_developments_in_offset_calc,
include_potential_offsets = current_program_params$include_potential_offsets_in_offset_calc,
include_illegal_clearing = current_program_params$include_illegal_clearing_in_offset_calc,
time_horizon_type = current_program_params$offset_time_horizon_type,
global_params,
current_program_params,
decline_rates_initial,
time_horizon,
yr)
for (eco_ind in seq_len(eco_dims)){
assessed_offsets[[parcel_set_ind]] = nested_list_sum(subtract_nested_lists(parcel_vals_achieved, current_offset_object$parcel_vals_used))
}
}
success_inds <- unlist(lapply(seq_along(assessed_offsets), function(i) (all(unlist(assessed_offsets[[i]][global_params$offset_dims_to_use]) > 0))))
assessed_offsets_object$success_inds <- offsets_object$parcel_indexes[success_inds]
assessed_offsets_object$assessed_offsets <- assessed_offsets
return(assessed_offsets_object)
}
assessed_offsets_object <- list()
eco_dims = global_params$eco_dims
parcel_set_count = length(offset_indexes)
assessed_offsets <- vector('list', parcel_set_count)
parcel_sets_to_assess = seq_len(parcel_set_count)
for (parcel_set_ind in parcel_sets_to_assess){
current_parcel_indexes <- unlist(offset_indexes[[parcel_set_ind]])
current_parcel_set <- which(unlist(offsets_object$parcel_indexes) %in% current_parcel_indexes)
current_offset_object <- lapply(seq_along(offsets_object), function(i) offsets_object[[i]][current_parcel_set])
names(current_offset_object) <- names(offsets_object)
parcel_vals_achieved <- assess_current_gain_pool(current_ecology,
pool_object = current_offset_object,
pool_type = "offset_bank",
calc_type = current_program_params$offset_calc_type,
cfacs_flag = current_program_params$offset_cfacs_flag,
adjust_cfacs_flag = current_program_params$adjust_offset_cfacs_flag,
include_potential_developments = current_program_params$include_potential_developments_in_offset_calc,
include_potential_offsets = current_program_params$include_potential_offsets_in_offset_calc,
include_illegal_clearing = current_program_params$include_illegal_clearing_in_offset_calc,
time_horizon_type = current_program_params$offset_time_horizon_type,
global_params,
current_program_params,
decline_rates_initial,
time_horizon,
yr)
for (eco_ind in seq_len(eco_dims)){
assessed_offsets[[parcel_set_ind]] = nested_list_sum(subtract_nested_lists(parcel_vals_achieved, current_offset_object$parcel_vals_used))
}
}
success_inds <- unlist(lapply(seq_along(assessed_offsets), function(i) (all(unlist(assessed_offsets[[i]][global_params$offset_dims_to_use]) > 0))))
assessed_offsets_object$success_inds <- offsets_object$parcel_indexes[success_inds]
assessed_offsets_object$assessed_offsets <- assessed_offsets
success_inds
assessed_offsets <- assess_offset_gains(current_ecology,
global_object$offsets_object,
offset_indexes = global_object$index_object$offsets,
global_params,
current_program_params,
decline_rates_initial,
decline_rates = global_object$decline_rates,
time_horizon,
yr)
assessed_offsets_object <- list()
eco_dims = global_params$eco_dims
parcel_set_count = length(offset_indexes)
assessed_offsets <- vector('list', parcel_set_count)
parcel_sets_to_assess = seq_len(parcel_set_count)
for (parcel_set_ind in parcel_sets_to_assess){
current_parcel_indexes <- unlist(offset_indexes[[parcel_set_ind]])
current_parcel_set <- which(unlist(offsets_object$parcel_indexes) %in% current_parcel_indexes)
current_offset_object <- lapply(seq_along(offsets_object), function(i) offsets_object[[i]][current_parcel_set])
names(current_offset_object) <- names(offsets_object)
parcel_vals_achieved <- assess_current_gain_pool(current_ecology,
pool_object = current_offset_object,
pool_type = "offset_bank",
calc_type = current_program_params$offset_calc_type,
cfacs_flag = current_program_params$offset_cfacs_flag,
adjust_cfacs_flag = current_program_params$adjust_offset_cfacs_flag,
include_potential_developments = current_program_params$include_potential_developments_in_offset_calc,
include_potential_offsets = current_program_params$include_potential_offsets_in_offset_calc,
include_illegal_clearing = current_program_params$include_illegal_clearing_in_offset_calc,
time_horizon_type = current_program_params$offset_time_horizon_type,
global_params,
current_program_params,
decline_rates_initial,
time_horizon,
yr)
for (eco_ind in seq_len(eco_dims)){
assessed_offsets[[parcel_set_ind]] = nested_list_sum(subtract_nested_lists(parcel_vals_achieved, current_offset_object$parcel_vals_used))
}
}
success_inds <- unlist(lapply(seq_along(assessed_offsets), function(i) (all(unlist(assessed_offsets[[i]][global_params$offset_dims_to_use]) > 0))))
assessed_offsets_object$success_inds <- offsets_object$parcel_indexes[success_inds]
assessed_offsets_object$assessed_offsets <- assessed_offsets
assessed_offsets <- assess_offset_gains(current_ecology,
global_object$offsets_object,
offset_indexes = global_object$index_object$offsets,
global_params,
current_program_params,
decline_rates_initial,
time_horizon,
yr)
offsets_object = global_object$offsets_object
dev_object = global_object$dev_object
decline_rates = global_object$decline_rates
offset_indexes = global_object$index_object$offsets
assessed_offsets_object <- list()
eco_dims = global_params$eco_dims
parcel_set_count = length(offset_indexes)
assessed_offsets <- vector('list', parcel_set_count)
parcel_sets_to_assess = seq_len(parcel_set_count)
for (parcel_set_ind in parcel_sets_to_assess){
current_parcel_indexes <- unlist(offset_indexes[[parcel_set_ind]])
current_parcel_set <- which(unlist(offsets_object$parcel_indexes) %in% current_parcel_indexes)
current_offset_object <- lapply(seq_along(offsets_object), function(i) offsets_object[[i]][current_parcel_set])
names(current_offset_object) <- names(offsets_object)
parcel_vals_achieved <- assess_current_gain_pool(current_ecology,
pool_object = current_offset_object,
pool_type = "offset_bank",
calc_type = current_program_params$offset_calc_type,
cfacs_flag = current_program_params$offset_cfacs_flag,
adjust_cfacs_flag = current_program_params$adjust_offset_cfacs_flag,
include_potential_developments = current_program_params$include_potential_developments_in_offset_calc,
include_potential_offsets = current_program_params$include_potential_offsets_in_offset_calc,
include_illegal_clearing = current_program_params$include_illegal_clearing_in_offset_calc,
time_horizon_type = current_program_params$offset_time_horizon_type,
global_params,
current_program_params,
decline_rates_initial,
time_horizon,
yr)
for (eco_ind in seq_len(eco_dims)){
assessed_offsets[[parcel_set_ind]] = nested_list_sum(subtract_nested_lists(parcel_vals_achieved, current_offset_object$parcel_vals_used))
}
}
success_inds <- unlist(lapply(seq_along(assessed_offsets), function(i) (all(unlist(assessed_offsets[[i]][global_params$offset_dims_to_use]) > 0))))
success_inds
assessed_offsets_object$success_inds <- offsets_object$parcel_indexes[success_inds]
assessed_offsets_object$assessed_offsets <- assessed_offsets
assess_offset_gains <- function(current_ecology, offsets_object, offset_indexes, global_params, current_program_params, decline_rates_initial, time_horizon, yr){
assessed_offsets_object <- list()
eco_dims = global_params$eco_dims
parcel_set_count = length(offset_indexes)
assessed_offsets <- vector('list', parcel_set_count)
parcel_sets_to_assess = seq_len(parcel_set_count)
for (parcel_set_ind in parcel_sets_to_assess){
current_parcel_indexes <- unlist(offset_indexes[[parcel_set_ind]])
current_parcel_set <- which(unlist(offsets_object$parcel_indexes) %in% current_parcel_indexes)
current_offset_object <- lapply(seq_along(offsets_object), function(i) offsets_object[[i]][current_parcel_set])
names(current_offset_object) <- names(offsets_object)
parcel_vals_achieved <- assess_current_gain_pool(current_ecology,
pool_object = current_offset_object,
pool_type = "offset_bank",
calc_type = current_program_params$offset_calc_type,
cfacs_flag = current_program_params$offset_cfacs_flag,
adjust_cfacs_flag = current_program_params$adjust_offset_cfacs_flag,
include_potential_developments = current_program_params$include_potential_developments_in_offset_calc,
include_potential_offsets = current_program_params$include_potential_offsets_in_offset_calc,
include_illegal_clearing = current_program_params$include_illegal_clearing_in_offset_calc,
time_horizon_type = current_program_params$offset_time_horizon_type,
global_params,
current_program_params,
decline_rates_initial,
time_horizon,
yr)
for (eco_ind in seq_len(eco_dims)){
assessed_offsets[[parcel_set_ind]] = nested_list_sum(subtract_nested_lists(parcel_vals_achieved, current_offset_object$parcel_vals_used))
}
}
success_inds <- unlist(lapply(seq_along(assessed_offsets), function(i) (all(unlist(assessed_offsets[[i]][global_params$offset_dims_to_use]) > 0))))
assessed_offsets_object$success_inds <- offsets_object$parcel_indexes[success_inds]
assessed_offsets_object$assessed_offsets <- assessed_offsets
return(assessed_offsets_object)
}
assessed_offsets <- assess_offset_gains(current_ecology,
global_object$offsets_object,
offset_indexes = global_object$index_object$offsets,
global_params,
current_program_params,
decline_rates_initial,
time_horizon,
yr)
source('initialise_params.R')                               # functions to collate simulation outputs
source('run_system_routines_modularised.R')                 # functions to run simulation
source('collate_routines.R')                                # functions to collate simulation outputs
source('plot_routines.R')                                   # functions to plot collated outputs
assessed_offsets <- assess_offset_gains(current_ecology,
global_object$offsets_object,
offset_indexes = global_object$index_object$offsets,
global_params,
current_program_params,
decline_rates_initial,
time_horizon,
yr)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_program_combs_with_regions.R', echo=TRUE)
if (global_params$set_seed == TRUE){
set.seed(123)
}
global_object = list()
global_object$offsets_object <- initialise_parcel_set_object()
global_object$dev_object <- initialise_parcel_set_object()
global_object$illegal_clearing <- initialise_parcel_set_object()
global_object$index_object <- initialise_index_object(parcels, global_params)
global_object$credited_dev_object <- initialise_parcel_set_object()
global_object$banked_offsets_object <- initialise_banked_offsets(global_params, program_params)
global_object$decline_rates <- decline_rates_initial
global_object$offset_pool_object <- list()
global_object$trajectories <- initialise_trajectories(global_params$eco_dims, land_parcels = parcels$land_parcels, global_params$time_steps)    # initialise trajectories as a list of N 3D arrays to fill for each eco dimension
global_object <- run_system(global_object, global_params,  program_params, current_ecology = initial_ecology, decline_rates_initial, parcels)
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_program_combs_with_regions.R', echo=TRUE)
if (global_params$set_seed == TRUE){
set.seed(123)
}
global_object = list()
global_object$offsets_object <- initialise_parcel_set_object()
global_object$dev_object <- initialise_parcel_set_object()
global_object$illegal_clearing <- initialise_parcel_set_object()
global_object$index_object <- initialise_index_object(parcels, global_params)
global_object$credited_dev_object <- initialise_parcel_set_object()
global_object$banked_offsets_object <- initialise_banked_offsets(global_params, program_params)
global_object$decline_rates <- decline_rates_initial
global_object$offset_pool_object <- list()
global_object$trajectories <- initialise_trajectories(global_params$eco_dims, land_parcels = parcels$land_parcels, global_params$time_steps)    # initialise trajectories as a list of N 3D arrays to fill for each eco dimension
current_ecology = initial_ecology
dev_credit = 0
for (yr in seq_len(global_params$time_steps)){          #run through main time loop
#for (yr in seq_len(25)){
for (region_ind in seq_len(parcels$region_num)){            #cycle through each region
# print(length(global_object$index_object$ind_available[[region_ind]]))
current_program_params = program_params[[region_ind]]
time_horizon <- current_program_params$offset_time_horizon
offset_bank_num = unlist(current_program_params$banked_offset_vec[yr])   # how many offsets to be added in current year
if (current_program_params$use_offset_bank == TRUE){
if (offset_bank_num > 0){
global_object <- add_to_bank(global_object, offset_bank_num, current_program_params,  yr,  current_ecology,  region_ind, global_params)
}
}
if (current_program_params$intervention_vec[yr] > 0){
global_object$index_object <- select_offset_index_pool(index_object = global_object$index_object, current_program_params, region_ind)
if (global_object$index_object$empty_pool_flag == TRUE){ #if nothing in offset pool do not attempt to develop
break
}
global_object$offset_pool_object <- prepare_offset_pool(current_offset_pool = global_object$index_object$offset_index_pool,
current_program_params,
index_object = global_object$index_object,
banked_offsets_object = global_object$banked_offsets_object,
decline_rates = global_object$decline_rates,
decline_rates_initial,
region_ind,
parcels,
current_ecology,
global_params,
time_horizon,
yr)
}
for (current_dev_index in seq_len(current_program_params$intervention_vec[yr])){   # cycle through number of developments and associated offsets
if (current_program_params$use_dev_credit == TRUE){
global_object = perform_development_from_credit_routine(global_object, current_program_params,  current_ecology, dev_credit,  region_ind,
current_offset_pool,  land_parcels,  yr,  time_horizon, global_params)
}
if (current_program_params$use_parcel_sets == TRUE){  #if insufficient credits accumulated, perform offset parcel set match
match_object <- match_parcel_set(offset_pool_object = global_object$offset_pool_object,
dev_credit,
global_params,
current_program_params,
intervention_vec = current_program_params$intervention_vec,
ind_available = global_object$index_object$ind_available[[region_ind]],
current_ecology,
decline_rates = global_object$decline_rates,
parcels$land_parcels,
yr,
time_horizon,
region_ind)  #perform the matching routine - i.e. find a matching development/offset set.
if (match_object$match_flag == TRUE){
global_object <- perform_offset_routine(global_object, match_object, current_program_params, region_ind, global_params)
global_object <- perform_clearing_routine(global_object,
clearing_type = 'development',
current_development_object = match_object$current_development_object,
region_ind,
global_params)
if (any(unlist(match_object$current_development_object$parcel_indexes) %in% unlist(global_object$offset_pool_object$parcel_indexes))){
global_object$offset_pool_object <- remove_dev_parcel_from_current_pool(global_object$offset_pool_object, match_object$current_development_object$parcel_indexes)
}
}
}
}
if (global_params$perform_illegal_clearing == TRUE){
global_object <- perform_illegal_clearing(global_object, current_ecology, land_parcel_num = parcels$land_parcel_num,
yr, region_ind, current_program_params, global_params, decline_rates_initial, time_horizon)
}
}
if (length(unlist(global_object$offsets_object$parcel_indexes)) > 0){
# remove already assessed indexes from gains_calculations
assessed_offsets <- assess_offset_gains(current_ecology,
global_object$offsets_object,
offset_indexes = global_object$index_object$offsets,
global_params,
current_program_params,
decline_rates_initial,
time_horizon,
yr)
if (length(unlist(assessed_offsets$success_inds)) > 0){
break
}
global_object$decline_rates <- update_decline_rates(global_object$decline_rates,
restoration_rate = current_program_params$restoration_rate,
offset_dims_to_use = global_params$offset_dims_to_use,
eco_dims = global_params$eco_dims,
decline_rate_type = 'offset',
offset_action_type = 'maintain',
parcel_indexes = assessed_offsets$success_inds)
}
global_object$trajectories <- update_trajectories(global_object$trajectories, global_params$eco_dims, current_ecology, yr)
current_ecology <- project_current_system_multi(current_ecology = current_ecology,
decline_rates = global_object$decline_rates,
min_eco_val = global_params$min_eco_val,
max_eco_val = global_params$max_eco_val,
max_restoration_eco_val = global_params$max_eco_val,
time_horizon = 1,
eco_dims = global_params$eco_dims)     # update ecology for subsequent time step using current decline rates
print(yr)
}
global_params$time_steps
assessed_offsets
assessed_offsets$success_inds
global_object$index_object$offsets
global_object$index_object$offsets[[1]]
global_object$index_object$offsets[[2]]
global_object$index_object$offsets[[3]]
global_object$index_object$offsets[[4]]
global_object$index_object$offsets[[5]]
assessed_offsets$success_inds
source('~/Documents/R_Codes/Offsets_Working_Feb_3/run_program_combs_with_regions.R', echo=TRUE)
if (global_params$set_seed == TRUE){
set.seed(123)
}
global_object = list()
global_object$offsets_object <- initialise_parcel_set_object()
global_object$dev_object <- initialise_parcel_set_object()
global_object$illegal_clearing <- initialise_parcel_set_object()
global_object$index_object <- initialise_index_object(parcels, global_params)
global_object$credited_dev_object <- initialise_parcel_set_object()
global_object$banked_offsets_object <- initialise_banked_offsets(global_params, program_params)
global_object$decline_rates <- decline_rates_initial
global_object$offset_pool_object <- list()
global_object$trajectories <- initialise_trajectories(global_params$eco_dims, land_parcels = parcels$land_parcels, global_params$time_steps)    # initialise trajectories as a list of N 3D arrays to fill for each eco dimension
current_ecology = initial_ecology
dev_credit = 0
for (yr in seq_len(global_params$time_steps)){          #run through main time loop
#for (yr in seq_len(25)){
for (region_ind in seq_len(parcels$region_num)){            #cycle through each region
# print(length(global_object$index_object$ind_available[[region_ind]]))
current_program_params = program_params[[region_ind]]
time_horizon <- current_program_params$offset_time_horizon
offset_bank_num = unlist(current_program_params$banked_offset_vec[yr])   # how many offsets to be added in current year
if (current_program_params$use_offset_bank == TRUE){
if (offset_bank_num > 0){
global_object <- add_to_bank(global_object, offset_bank_num, current_program_params,  yr,  current_ecology,  region_ind, global_params)
}
}
if (current_program_params$intervention_vec[yr] > 0){
global_object$index_object <- select_offset_index_pool(index_object = global_object$index_object, current_program_params, region_ind)
if (global_object$index_object$empty_pool_flag == TRUE){ #if nothing in offset pool do not attempt to develop
break
}
global_object$offset_pool_object <- prepare_offset_pool(current_offset_pool = global_object$index_object$offset_index_pool,
current_program_params,
index_object = global_object$index_object,
banked_offsets_object = global_object$banked_offsets_object,
decline_rates = global_object$decline_rates,
decline_rates_initial,
region_ind,
parcels,
current_ecology,
global_params,
time_horizon,
yr)
}
for (current_dev_index in seq_len(current_program_params$intervention_vec[yr])){   # cycle through number of developments and associated offsets
if (current_program_params$use_dev_credit == TRUE){
global_object = perform_development_from_credit_routine(global_object, current_program_params,  current_ecology, dev_credit,  region_ind,
current_offset_pool,  land_parcels,  yr,  time_horizon, global_params)
}
if (current_program_params$use_parcel_sets == TRUE){  #if insufficient credits accumulated, perform offset parcel set match
match_object <- match_parcel_set(offset_pool_object = global_object$offset_pool_object,
dev_credit,
global_params,
current_program_params,
intervention_vec = current_program_params$intervention_vec,
ind_available = global_object$index_object$ind_available[[region_ind]],
current_ecology,
decline_rates = global_object$decline_rates,
parcels$land_parcels,
yr,
time_horizon,
region_ind)  #perform the matching routine - i.e. find a matching development/offset set.
if (match_object$match_flag == TRUE){
global_object <- perform_offset_routine(global_object, match_object, current_program_params, region_ind, global_params)
global_object <- perform_clearing_routine(global_object,
clearing_type = 'development',
current_development_object = match_object$current_development_object,
region_ind,
global_params)
if (any(unlist(match_object$current_development_object$parcel_indexes) %in% unlist(global_object$offset_pool_object$parcel_indexes))){
global_object$offset_pool_object <- remove_dev_parcel_from_current_pool(global_object$offset_pool_object, match_object$current_development_object$parcel_indexes)
}
}
}
}
if (global_params$perform_illegal_clearing == TRUE){
global_object <- perform_illegal_clearing(global_object, current_ecology, land_parcel_num = parcels$land_parcel_num,
yr, region_ind, current_program_params, global_params, decline_rates_initial, time_horizon)
}
}
if (length(unlist(global_object$offsets_object$parcel_indexes)) > 0){
# remove already assessed indexes from gains_calculations
assessed_offsets <- assess_offset_gains(current_ecology,
global_object$offsets_object,
offset_indexes = global_object$index_object$offsets,
global_params,
current_program_params,
decline_rates_initial,
time_horizon,
yr)
if (length(unlist(assessed_offsets$success_inds)) > 0){
break
}
global_object$decline_rates <- update_decline_rates(global_object$decline_rates,
restoration_rate = current_program_params$restoration_rate,
offset_dims_to_use = global_params$offset_dims_to_use,
eco_dims = global_params$eco_dims,
decline_rate_type = 'offset',
offset_action_type = 'maintain',
parcel_indexes = assessed_offsets$success_inds)
}
global_object$trajectories <- update_trajectories(global_object$trajectories, global_params$eco_dims, current_ecology, yr)
current_ecology <- project_current_system_multi(current_ecology = current_ecology,
decline_rates = global_object$decline_rates,
min_eco_val = global_params$min_eco_val,
max_eco_val = global_params$max_eco_val,
max_restoration_eco_val = global_params$max_eco_val,
time_horizon = 1,
eco_dims = global_params$eco_dims)     # update ecology for subsequent time step using current decline rates
print(yr)
}
assessed_offsets
global_object$decline_rates <- update_decline_rates(global_object$decline_rates,
restoration_rate = current_program_params$restoration_rate,
offset_dims_to_use = global_params$offset_dims_to_use,
eco_dims = global_params$eco_dims,
decline_rate_type = 'offset',
offset_action_type = 'maintain',
parcel_indexes = assessed_offsets$success_inds)
global_object$decline_rates[unlist(assessed_offsets$success_inds)]
\
\
